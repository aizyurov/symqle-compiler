#zOrderByClause ::= ORDER BY zSortSpecificationList
#zSortSpecificationList ::= zSortSpecification [ { comma zSortSpecification }... ]
#zSortSpecification ::= zSortKey [ ordering_specification ] [ null_ordering ]
#zSortKey ::= zValueExpression
#ordering_specification ::= ASC | DESC
#null_ordering ::= NULLS FIRST | NULLS LAST

#rephrased in trivial manner - see below

public interface zOrderByClause : Sql
{}
# no class OrderByClause!

zOrderByClause ::= ORDER BY ssl:zSortSpecificationList
;

public interface zSortSpecificationList : Sql
{}
public class SortSpecificationList implements zSortSpecificationList with sortSpecificationListBuilder
{}

zSortSpecificationList ::= ss:zSortSpecification
| ssl:zSortSpecificationList COMMA ss:zSortSpecification
;

# we need not a class zSortSpecificationList: the user never constructs it directly, because
# CursorSpecification#orderBy accepts a list of zSortSpecification and constructs zSortSpecificationList internally

public interface zSortSpecification : Sql
{}
public class SortSpecification implements zSortSpecification with sortSpec
{}

zSortSpecification ::= sos:zSortOrderingSpecification
    :: SortOrderingSpecification mimics SortSpecification
    {}
|   sos:zSortOrderingSpecification NULLS FIRST
    :: SortOrderingSpecification
    {
        public SortSpecification nullsFirst() {
            return new SortSpecification(
                _APPLY_RULE_(this)
                );
        }
    }
|   sos:zSortOrderingSpecification NULLS LAST
    :: SortOrderingSpecification
    {
        public SortSpecification nullsLast() {
            return new SortSpecification(
                _APPLY_RULE_(this)
                );
        }

    }
;

public interface zSortOrderingSpecification : Sql
{}
public class SortOrderingSpecification implements zSortOrderingSpecification with sortOderingSpecBuilder
{}

zSortOrderingSpecification ::= key:zSortKey
    :: SortKey mimics SortOrderingSpecification
    {}
| key:zSortKey ASC
    :: SortKey
    {
        public SortOrderingSpecification asc() {
            return new SortOrderingSpecification(
                _APPLY_RULE_(this)
                );
        }
    }
| key:zSortKey DESC
    :: SortKey
    {
        public SortOrderingSpecification desc() {
            return new SortOrderingSpecification(
                _APPLY_RULE_(this)
                );
        }
    }
;

public interface zSortKey : Sql
{}
class SortKey implements zSortKey with sortKeyBuilder
{}

zSortKey ::= ve:zValueExpression
    :: Value<T> mimics SortKey
    {}
;
