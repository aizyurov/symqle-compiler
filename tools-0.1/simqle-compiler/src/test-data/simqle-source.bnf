BNF Grammar for ISO/IEC 9075-2:2003 - Database Language SQL (SQL-2003) SQL/Foundation
=====================================================================================

@(#)$Id: sql-2003-2.bnf,v 1.11 2005/07/13 18:37:30 jleffler Exp $

--p
Information taken from the Final Committee Draft (FCD) of ISO/IEC 9075-2:2003.
However, the page numbers and some section titles (9.14 through 9.23,
for example) are from the final standard.
This means there could be other as yet undiagnosed differences between
the final standard and the notation in this document; you were warned!
--/p

--p
The plain text version of this grammar is
--## a_href='sql-2003-2.bnf' sql-2003-2.bnf /a.
--/p

--hr
--h2 Key SQL Statements and Fragments
--/h2
--bl
--li ALTER DOMAIN alter_domain_statement
--li ALTER TABLE alter_table_statement
--li CLOSE cursor close_statement
--li Column definition column_definition
--li COMMIT WORK commit_statement
--li CONNECT connect_statement
--li CREATE ASSERTION assertion_definition
--li CREATE CHARACTER SET character_set_definition
--li CREATE COLLATION collation_definition
--li CREATE DOMAIN domain_definition
--li CREATE FUNCTION schema_function
--li CREATE PROCEDURE schema_procedure
--li CREATE SCHEMA schema_definition
--li CREATE TABLE table_definition
--li CREATE TRANSLATION translation_definition
--li CREATE TRIGGER trigger_definition
--li CREATE VIEW view_definition
--li Data type data_type
--li DEALLOCATE PREPARE deallocate_prepared_statement
--li DECLARE cursor declare_cursor dynamic_declare_cursor
--li DECLARE LOCAL TEMPORARY TABLE temporary_table_declaration
--li DELETE delete_statement:_positioned delete_statement:_searched dynamic_delete_statement:_positioned
--li DESCRIBE describe_statement
--li DESCRIPTOR statements system_descriptor_statement
--li DISCONNECT disconnect_statement
--li EXECUTE execute_statement
--li EXECUTE IMMEDIATE execute_immediate_statement
--li FETCH cursor fetch_statement
--li FROM clause from_clause
--li GET DIAGNOSTICS get_diagnostics_statement
--li GRANT grant_statement
--li GROUP BY clause group_by_clause
--li HAVING clause having_clause
--li INSERT insert_statement
--li Literals literal
--li Keywords key_word
--li MERGE merge_statement
--li OPEN cursor open_statement
--li ORDER BY clause order_by_clause
--li PREPARE prepare_statement
--li REVOKE revoke_statement
--li ROLLBACK WORK rollback_statement
--li SAVEPOINT savepoint_statement
--li Search condition search_condition regular_expression
--li SELECT query_specification
--li SET CATALOG set_catalog_statement
--li SET CONNECTION set_connection_statement
--li SET CONSTRAINTS set_constraints_mode_statement
--li SET NAMES set_names_statement
--li SET SCHEMA set_schema_statement
--li SET SESSION AUTHORIZATION set_session_user_identifier_statement
--li SET TIME ZONE set_local_time_zone_statement
--li SET TRANSACTION set_transaction_statement
--li SQL Client MODULE SQL-client_module_definition
--li UPDATE update_statement:_positioned update_statement:_searched dynamic_update_statement:_positioned
--li Value expression value_expression
--li WHERE clause where_clause
--/bl

--hr
--h2 5 Lexical Elements
--/h2

--p
Basic definitions of characters used, tokens, symbols, etc.
Most of this section would normally be handled within the lexical
analyzer rather than in the grammar proper.
Further, the original document does not quote the various single
characters, which makes it hard to process automatically.
--/p

--h3 5.1 SQL_terminal_character (p151)
--/h3

SQL_terminal_character ::= SQL_language_character

SQL_language_character ::= simple_Latin_letter | digit | SQL_special_character

simple_Latin_letter ::= simple_Latin_upper_case_letter | simple_Latin_lower_case_letter

simple_Latin_upper_case_letter ::=
		A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

simple_Latin_lower_case_letter ::=
		a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z

digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

SQL_special_character ::=
		space
	|	double_quote
	|	percent
	|	ampersand
	|	quote
	|	left_paren
	|	right_paren
	|	asterisk
	|	plus_sign
	|	comma
	|	minus_sign
	|	period
	|	solidus
	|	colon
	|	semicolon
	|	less_than_operator
	|	equals_operator
	|	greater_than_operator
	|	question_mark
	|	left_bracket
	|	right_bracket
	|	circumflex
	|	underscore
	|	vertical_bar
	|	left_brace
	|	right_brace

space ::= !! See the Syntax Rules

double_quote ::= "

percent ::= %

ampersand ::= &

quote ::= '

left_paren ::= (

right_paren ::= )

asterisk ::= *

plus_sign ::= +

comma ::= ,

minus_sign ::= -

period ::= .

solidus ::= /

colon ::= :

semicolon ::= ;

less_than_operator ::= <

equals_operator ::= =

greater_than_operator ::= >

question_mark ::= ?

--p
--i
The trigraphs are new in SQL-2003.
--/i
--/p

left_bracket_or_trigraph ::= left_bracket | left_bracket_trigraph

right_bracket_or_trigraph ::= right_bracket | right_bracket_trigraph

left_bracket ::= [

left_bracket_trigraph ::= ??(

right_bracket ::= ]

right_bracket_trigraph ::= ??)

circumflex ::= ^

underscore ::= _

vertical_bar ::= |

left_brace ::= {

right_brace ::= }

--hr
--h3 5.2 token and separator (p134)
--/h3

--p
Specifying lexical units (tokens and separators) that participate in SQL language.
--/p

token ::= nondelimiter_token | delimiter_token

nondelimiter_token ::=
		regular_identifier
	|	key_word
	|	unsigned_numeric_literal
	|	national_character_string_literal
	|	bit_string_literal
	|	hex_string_literal
	|	large_object_length_token
	|	multiplier

regular_identifier ::= identifier_body

identifier_body ::= identifier_start [ identifier_part... ]

identifier_part ::= identifier_start | identifier_extend

--p
--i
--small
Previous standard said:
--br
identifier_start ::= initial_alphabetic_character | ideographic_character
--/small
--/i
--/p

identifier_start ::= !! See the Syntax Rules

identifier_extend ::= !! See the Syntax Rules

large_object_length_token ::= digit... multiplier

multiplier ::= K | M | G

--p
--i
--small
The productions for Unicode_delimited_identifier and so on are new in SQL-2003.
--/small
--/i
--/p

Unicode_delimited_identifier ::=
		Uampersanddouble_quote Unicode_delimiter_body... double_quote
		[ ESCAPE escape_character ]

Unicode_delimiter_body ::= Unicode_identifier_part...

Unicode_identifier_part ::= delimited_identifier_part | Unicode_escape_value

Unicode_escape_value ::= Unicode_4_digit_escape_value | Unicode_6_digit_escape_value

Unicode_4_digit_escape_value ::= escape_characterhexithexithexithexit

Unicode_6_digit_escape_value ::= escape_character plus_signhexithexithexithexithexithexit

escape_character ::= !! See the Syntax Rules

nondoublequote_character ::= !! See the Syntax Rules

--p
--i
--small
The rule for doublequote_symbol in the standard uses two adjacent literal double quotes rather than referencing double_quote; the reasons are not clear.
It is annotated '!! two consecutive double quote characters'.
--/small
--/i
--/p

doublequote_symbol ::= double_quote double_quote

delimiter_token ::=
		character_string_literal
	|	date_string
	|	time_string
	|	timestamp_string
	|	interval_string
	|	delimited_identifier
	|	Unicode_delimited_identifier
	|	SQL_special_character
	|	not_equals_operator
	|	greater_than_or_equals_operator
	|	less_than_or_equals_operator
	|	concatenation_operator
	|	right_arrow
	|	left_bracket_trigraph
	|	right_bracket_trigraph
	|	double_colon
	|	double_period

--p
--i
--small
The rules for not_equals_operator etc in the standard uses
two adjacent literal characters rather than referencing
less_than and greater_than; the reasons are not clear.
Note that two characters must be adjacent with no
intervening space, not a pair of characters separated by
arbitrary white space.
--/small
--/i
--/p

not_equals_operator ::= less_than_operator greater_than_operator

greater_than_or_equals_operator ::= greater_than_operator equals_operator

less_than_or_equals_operator ::= less_than_operator equals_operator

concatenation_operator ::= vertical_bar vertical_bar

right_arrow ::= minus_sign greater_than_operator

double_colon ::= colon colon

double_period ::= period period

separator ::= { comment | white_space }...

comment ::= simple_comment | bracketed_comment

simple_comment ::= simple_comment_introducer [ comment_character... ] newline

simple_comment_introducer ::= minus_signminus_sign [ minus_sign... ]

--p
--small
--i
The bracketed_comment rule included '!! See the Syntax Rules'.
This probably says something about the slash asterisk and asterisk
slash needing to be adjacent characters rather than adjacent tokens.
--/i
--/small
--/p

bracketed_comment ::=
		bracketed_comment_introducer bracketed_comment_contents bracketed_comment_terminator

bracketed_comment_introducer ::= slash asterisk

bracketed_comment_terminator ::= asterisk slash

bracketed_comment_contents ::= [ { comment_character | separator }... ]

comment_character ::= nonquote_character | quote

newline ::= !! See the Syntax Rules

--p
--small
--i
There was a surprising amount of movement of keywords
between the reserved and non-reserved word classes.
There is also room to think that much of the host language
support moved out of Part 2 (SQL/Foundation).
--/i
--/small
--/p

key_word ::= reserved_word | non-reserved_word

non-reserved_word ::=
		A
	|	ABS
	|	ABSOLUTE
	|	ACTION
	|	ADA
	|	ADMIN
	|	AFTER
	|	ALWAYS
	|	ASC
	|	ASSERTION
	|	ASSIGNMENT
	|	ATTRIBUTE
	|	ATTRIBUTES
	|	AVG
	|	BEFORE
	|	BERNOULLI
	|	BREADTH
	|	C
	|	CARDINALITY
	|	CASCADE
	|	CATALOG
	|	CATALOG_NAME
	|	CEIL
	|	CEILING
	|	CHAIN
	|	CHARACTERISTICS
	|	CHARACTERS
	|	CHARACTER_LENGTH
	|	CHARACTER_SET_CATALOG
	|	CHARACTER_SET_NAME
	|	CHARACTER_SET_SCHEMA
	|	CHAR_LENGTH
	|	CHECKED
	|	CLASS_ORIGIN
	|	COALESCE
	|	COBOL
	|	CODE_UNITS
	|	COLLATION
	|	COLLATION_CATALOG
	|	COLLATION_NAME
	|	COLLATION_SCHEMA
	|	COLLECT
	|	COLUMN_NAME
	|	COMMAND_FUNCTION
	|	COMMAND_FUNCTION_CODE
	|	COMMITTED
	|	CONDITION
	|	CONDITION_NUMBER
	|	CONNECTION_NAME
	|	CONSTRAINTS
	|	CONSTRAINT_CATALOG
	|	CONSTRAINT_NAME
	|	CONSTRAINT_SCHEMA
	|	CONSTRUCTORS
	|	CONTAINS
	|	CONVERT
	|	CORR
	|	COUNT
	|	COVAR_POP
	|	COVAR_SAMP
	|	CUME_DIST
	|	CURRENT_COLLATION
	|	CURSOR_NAME
	|	DATA
	|	DATETIME_INTERVAL_CODE
	|	DATETIME_INTERVAL_PRECISION
	|	DEFAULTS
	|	DEFERRABLE
	|	DEFERRED
	|	DEFINED
	|	DEFINER
	|	DEGREE
	|	DENSE_RANK
	|	DEPTH
	|	DERIVED
	|	DESC
	|	DESCRIPTOR
	|	DIAGNOSTICS
	|	DISPATCH
	|	DOMAIN
	|	DYNAMIC_FUNCTION
	|	DYNAMIC_FUNCTION_CODE
	|	EQUALS
	|	EVERY
	|	EXCEPTION
	|	EXCLUDE
	|	EXCLUDING
	|	EXP
	|	EXTRACT
	|	FINAL
	|	FIRST
	|	FLOOR
	|	FOLLOWING
	|	FORTRAN
	|	FOUND
	|	FUSION
	|	G
	|	GENERAL
	|	GO
	|	GOTO
	|	GRANTED
	|	HIERARCHY
	|	IMPLEMENTATION
	|	INCLUDING
	|	INCREMENT
	|	INITIALLY
	|	INSTANCE
	|	INSTANTIABLE
	|	INTERSECTION
	|	INVOKER
	|	ISOLATION
	|	K
	|	KEY
	|	KEY_MEMBER
	|	KEY_TYPE
	|	LAST
	|	LENGTH
	|	LEVEL
	|	LN
	|	LOCATOR
	|	LOWER
	|	M
	|	MAP
	|	MATCHED
	|	MAX
	|	MAXVALUE
	|	MESSAGE_LENGTH
	|	MESSAGE_OCTET_LENGTH
	|	MESSAGE_TEXT
	|	MIN
	|	MINVALUE
	|	MOD
	|	MORE
	|	MUMPS
	|	NAME
	|	NAMES
	|	NESTING
	|	NEXT
	|	NORMALIZE
	|	NORMALIZED
	|	NULLABLE
	|	NULLIF
	|	NULLS
	|	NUMBER
	|	OBJECT
	|	OCTETS
	|	OCTET_LENGTH
	|	OPTION
	|	OPTIONS
	|	ORDERING
	|	ORDINALITY
	|	OTHERS
	|	OVERLAY
	|	OVERRIDING
	|	PAD
	|	PARAMETER_MODE
	|	PARAMETER_NAME
	|	PARAMETER_ORDINAL_POSITION
	|	PARAMETER_SPECIFIC_CATALOG
	|	PARAMETER_SPECIFIC_NAME
	|	PARAMETER_SPECIFIC_SCHEMA
	|	PARTIAL
	|	PASCAL
	|	PATH
	|	PERCENTILE_CONT
	|	PERCENTILE_DISC
	|	PERCENT_RANK
	|	PLACING
	|	PLI
	|	POSITION
	|	POWER
	|	PRECEDING
	|	PRESERVE
	|	PRIOR
	|	PRIVILEGES
	|	PUBLIC
	|	RANK
	|	READ
	|	REGR_AVGX
	|	REGR_AVGY
	|	REGR_COUNT
	|	REGR_INTERCEPT
	|	REGR_R2
	|	REGR_SLOPE
	|	REGR_SXX
	|	REGR_SXY
	|	REGR_SXY
	|	RELATIVE
	|	REPEATABLE
	|	RESTART
	|	RESULT
	|	RETURNED_CARDINALITY
	|	RETURNED_LENGTH
	|	RETURNED_OCTET_LENGTH
	|	RETURNED_SQLSTATE
	|	ROLE
	|	ROUTINE
	|	ROUTINE_CATALOG
	|	ROUTINE_NAME
	|	ROUTINE_SCHEMA
	|	ROW_COUNT
	|	ROW_NUMBER
	|	SCALE
	|	SCHEMA
	|	SCHEMA_NAME
	|	SCOPE_CATALOG
	|	SCOPE_NAME
	|	SCOPE_SCHEMA
	|	SECTION
	|	SECURITY
	|	SELF
	|	SEQUENCE
	|	SERIALIZABLE
	|	SERVER_NAME
	|	SESSION
	|	SETS
	|	SIMPLE
	|	SIZE
	|	SOURCE
	|	SPACE
	|	SPECIFIC_NAME
	|	SQRT
	|	STATE
	|	STATEMENT
	|	STDDEV_POP
	|	STDDEV_SAMP
	|	STRUCTURE
	|	STYLE
	|	SUBCLASS_ORIGIN
	|	SUBSTRING
	|	SUM
	|	TABLESAMPLE
	|	TABLE_NAME
	|	TEMPORARY
	|	TIES
	|	TOP_LEVEL_COUNT
	|	TRANSACTION
	|	TRANSACTIONS_COMMITTED
	|	TRANSACTIONS_ROLLED_BACK
	|	TRANSACTION_ACTIVE
	|	TRANSFORM
	|	TRANSFORMS
	|	TRANSLATE
	|	TRIGGER_CATALOG
	|	TRIGGER_NAME
	|	TRIGGER_SCHEMA
	|	TRIM
	|	TYPE
	|	UNBOUNDED
	|	UNCOMMITTED
	|	UNDER
	|	UNNAMED
	|	UPPER
	|	USAGE
	|	USER_DEFINED_TYPE_CATALOG
	|	USER_DEFINED_TYPE_CODE
	|	USER_DEFINED_TYPE_NAME
	|	USER_DEFINED_TYPE_SCHEMA
	|	VAR_POP
	|	VAR_SAMP
	|	VIEW
	|	WIDTH_BUCKET
	|	WORK
	|	WRITE
	|	ZONE

reserved_word ::=
		ADD
	|	ALL
	|	ALLOCATE
	|	ALTER
	|	AND
	|	ANY
	|	ARE
	|	ARRAY
	|	AS
	|	ASENSITIVE
	|	ASYMMETRIC
	|	AT
	|	ATOMIC
	|	AUTHORIZATION
	|	BEGIN
	|	BETWEEN
	|	BIGINT
	|	BINARY
	|	BLOB
	|	BOOLEAN
	|	BOTH
	|	BY
	|	CALL
	|	CALLED
	|	CASCADED
	|	CASE
	|	CAST
	|	CHAR
	|	CHARACTER
	|	CHECK
	|	CLOB
	|	CLOSE
	|	COLLATE
	|	COLUMN
	|	COMMIT
	|	CONNECT
	|	CONSTRAINT
	|	CONTINUE
	|	CORRESPONDING
	|	CREATE
	|	CROSS
	|	CUBE
	|	CURRENT
	|	CURRENT_DATE
	|	CURRENT_DEFAULT_TRANSFORM_GROUP
	|	CURRENT_PATH
	|	CURRENT_ROLE
	|	CURRENT_TIME
	|	CURRENT_TIMESTAMP
	|	CURRENT_TRANSFORM_GROUP_FOR_TYPE
	|	CURRENT_USER
	|	CURSOR
	|	CYCLE
	|	DATE
	|	DAY
	|	DEALLOCATE
	|	DEC
	|	DECIMAL
	|	DECLARE
	|	DEFAULT
	|	DELETE
	|	DEREF
	|	DESCRIBE
	|	DETERMINISTIC
	|	DISCONNECT
	|	DISTINCT
	|	DOUBLE
	|	DROP
	|	DYNAMIC
	|	EACH
	|	ELEMENT
	|	ELSE
	|	END
	|	END-EXEC
	|	ESCAPE
	|	EXCEPT
	|	EXEC
	|	EXECUTE
	|	EXISTS
	|	EXTERNAL
	|	FALSE
	|	FETCH
	|	FILTER
	|	FLOAT
	|	FOR
	|	FOREIGN
	|	FREE
	|	FROM
	|	FULL
	|	FUNCTION
	|	GET
	|	GLOBAL
	|	GRANT
	|	GROUP
	|	GROUPING
	|	HAVING
	|	HOLD
	|	HOUR
	|	IDENTITY
	|	IMMEDIATE
	|	IN
	|	INDICATOR
	|	INNER
	|	INOUT
	|	INPUT
	|	INSENSITIVE
	|	INSERT
	|	INT
	|	INTEGER
	|	INTERSECT
	|	INTERVAL
	|	INTO
	|	IS
	|	ISOLATION
	|	JOIN
	|	LANGUAGE
	|	LARGE
	|	LATERAL
	|	LEADING
	|	LEFT
	|	LIKE
	|	LOCAL
	|	LOCALTIME
	|	LOCALTIMESTAMP
	|	MATCH
	|	MEMBER
	|	MERGE
	|	METHOD
	|	MINUTE
	|	MODIFIES
	|	MODULE
	|	MONTH
	|	MULTISET
	|	NATIONAL
	|	NATURAL
	|	NCHAR
	|	NCLOB
	|	NEW
	|	NO
	|	NONE
	|	NOT
	|	NULL
	|	NUMERIC
	|	OF
	|	OLD
	|	ON
	|	ONLY
	|	OPEN
	|	OR
	|	ORDER
	|	OUT
	|	OUTER
	|	OUTPUT
	|	OVER
	|	OVERLAPS
	|	PARAMETER
	|	PARTITION
	|	PRECISION
	|	PREPARE
	|	PRIMARY
	|	PROCEDURE
	|	RANGE
	|	READS
	|	REAL
	|	RECURSIVE
	|	REF
	|	REFERENCES
	|	REFERENCING
	|	RELEASE
	|	RETURN
	|	RETURNS
	|	REVOKE
	|	RIGHT
	|	ROLLBACK
	|	ROLLUP
	|	ROW
	|	ROWS
	|	SAVEPOINT
	|	SCROLL
	|	SEARCH
	|	SECOND
	|	SELECT
	|	SENSITIVE
	|	SESSION_USER
	|	SET
	|	SIMILAR
	|	SMALLINT
	|	SOME
	|	SPECIFIC
	|	SPECIFICTYPE
	|	SQL
	|	SQLEXCEPTION
	|	SQLSTATE
	|	SQLWARNING
	|	START
	|	STATIC
	|	SUBMULTISET
	|	SYMMETRIC
	|	SYSTEM
	|	SYSTEM_USER
	|	TABLE
	|	THEN
	|	TIME
	|	TIMESTAMP
	|	TIMEZONE_HOUR
	|	TIMEZONE_MINUTE
	|	TO
	|	TRAILING
	|	TRANSLATION
	|	TREAT
	|	TRIGGER
	|	TRUE
	|	UNION
	|	UNIQUE
	|	UNKNOWN
	|	UNNEST
	|	UPDATE
	|	USER
	|	USING
	|	VALUE
	|	VALUES
	|	VARCHAR
	|	VARYING
	|	WHEN
	|	WHENEVER
	|	WHERE
	|	WINDOW
	|	WITH
	|	WITHIN
	|	WITHOUT
	|	YEAR

--hr
--h3 5.3 literal (p143)
--/h3

literal ::= signed_numeric_literal | general_literal

unsigned_literal ::= unsigned_numeric_literal | general_literal

general_literal ::=
		character_string_literal
	|	national_character_string_literal
	|	Unicode_character_string_literal
	|	binary_string_literal
	|	datetime_literal
	|	interval_literal
	|	boolean_literal

character_string_literal ::=
		[ introducercharacter_set_specification ]
		quote [ character_representation... ] quote
		[ { separator quote [ character_representation... ] quote }... ]

introducer ::= underscore

character_representation ::= nonquote_character | quote_symbol

nonquote_character ::= !! See the Syntax Rules

--p
--small
--i
The quote_symbol rule consists of two immediately adjacent quote
marks with no spaces.
As usual, this would be best handled in the lexical analyzer, not in the
grammar.
--/i
--/small
--/p

quote_symbol ::= quotequote

national_character_string_literal ::=
		N quote [ character_representation... ] quote
		[ { separator quote [ character_representation... ] quote }... ]

Unicode_character_string_literal ::=
		[ introducercharacter_set_specification ]
		Uampersandquote [ Unicode_representation... ] quote
		[ { separator quote [ Unicode_representation... ] quote }... ]
		[ ESCAPE escape_character ]

Unicode_representation ::= character_representation | Unicode_escape_value

binary_string_literal ::=
		X quote [ { hexithexit }... ] quote
		[ { separator quote [ { hexithexit }... ] quote }... ]
		[ ESCAPE escape_character ]

hexit ::= digit | A | B | C | D | E | F | a | b | c | d | e | f

signed_numeric_literal ::= [ sign ] unsigned_numeric_literal

unsigned_numeric_literal ::= exact_numeric_literal | approximate_numeric_literal

exact_numeric_literal ::=
		unsigned_integer [ period [ unsigned_integer ] ]
	|	period unsigned_integer

sign ::= plus_sign | minus_sign

approximate_numeric_literal ::= mantissa E exponent

mantissa ::= exact_numeric_literal

exponent ::= signed_integer

signed_integer ::= [ sign ] unsigned_integer

datetime_literal ::= date_literal | time_literal | timestamp_literal

date_literal ::= DATE date_string

time_literal ::= TIME time_string

timestamp_literal ::= TIMESTAMP timestamp_string

date_string ::= quote unquoted_date_string quote

time_string ::= quote unquoted_time_string quote

timestamp_string ::= quote unquoted_timestamp_string quote

time_zone_interval ::= sign hours_value colon minutes_value

date_value ::= years_value minus_sign months_value minus_sign days_value

time_value ::= hours_value colon minutes_value colon seconds_value

interval_literal ::= INTERVAL [ sign ] interval_string interval_qualifier

interval_string ::= quote unquoted_interval_string quote

unquoted_date_string ::= date_value

unquoted_time_string ::= time_value [ time_zone_interval ]

unquoted_timestamp_string ::= unquoted_date_string space unquoted_time_string

unquoted_interval_string ::= [ sign ] { year-month_literal | day-time_literal }

year-month_literal ::= years_value | [ years_value minus_sign ] months_value

day-time_literal ::= day-time_interval | time_interval

day-time_interval ::=
		days_value [ space hours_value [ colon minutes_value [ colon seconds_value ] ] ]

time_interval ::=
		hours_value [ colon minutes_value [ colon seconds_value ] ]
	|	minutes_value [ colon seconds_value ]
	|	seconds_value

years_value ::= datetime_value

months_value ::= datetime_value

days_value ::= datetime_value

hours_value ::= datetime_value

minutes_value ::= datetime_value

seconds_value ::= seconds_integer_value [ period [ seconds_fraction ] ]

seconds_integer_value ::= unsigned_integer

seconds_fraction ::= unsigned_integer

datetime_value ::= unsigned_integer

boolean_literal ::= TRUE | FALSE | UNKNOWN

--hr
--h3 5.4 Names and identifiers (p151)
--/h3

identifier ::= actual_identifier

actual_identifier ::= regular_identifier | delimited_identifier

SQL_language_identifier ::=
		SQL_language_identifier_start [ { underscore | SQL_language_identifier_part }... ]

SQL_language_identifier_start ::= simple_Latin_letter

SQL_language_identifier_part ::= simple_Latin_letter | digit

authorization_identifier ::= role_name | user_identifier

table_name ::= local_or_schema_qualified_name

domain_name ::= schema_qualified_name

schema_name ::= [ catalog_name period ] unqualified_schema_name

catalog_name ::= identifier

schema_qualified_name ::= [ schema_name period ] qualified_identifier

local_or_schema_qualified_name ::= [ local_or_schema_qualifier period ] qualified_identifier

local_or_schema_qualifier ::= schema_name | MODULE

qualified_identifier ::= identifier

column_name ::= identifier

correlation_name ::= identifier

query_name ::= identifier

SQL-client_module_name ::= identifier

procedure_name ::= identifier

schema_qualified_routine_name ::= schema_qualified_name

method_name ::= identifier

specific_name ::= schema_qualified_name

cursor_name ::= local_qualified_name

local_qualified_name ::= [ local_qualifier period ] qualified_identifier

local_qualifier ::= MODULE

host_parameter_name ::= colon identifier

SQL_parameter_name ::= identifier

constraint_name ::= schema_qualified_name

external_routine_name ::= identifier | character_string_literal

trigger_name ::= schema_qualified_name

collation_name ::= schema_qualified_name

character_set_name ::= [ schema_name period ] SQL_language_identifier

transliteration_name ::= schema_qualified_name

transcoding_name ::= schema_qualified_name

user-defined_type_name ::= schema_qualified_type_name

schema-resolved_user-defined_type_name ::= user-defined_type_name

schema_qualified_type_name ::= [ schema_name period ] qualified_identifier

attribute_name ::= identifier

field_name ::= identifier

savepoint_name ::= identifier

sequence_generator_name ::= schema_qualified_name

role_name ::= identifier

user_identifier ::= identifier

connection_name ::= simple_value_specification

SQL-server_name ::= simple_value_specification

connection_user_name ::= simple_value_specification

SQL_statement_name ::= statement_name | extended_statement_name

statement_name ::= identifier

extended_statement_name ::= [ scope_option ] simple_value_specification

dynamic_cursor_name ::= cursor_name | extended_cursor_name

extended_cursor_name ::= [ scope_option ] simple_value_specification

descriptor_name ::= [ scope_option ] simple_value_specification

scope_option ::= GLOBAL | LOCAL

window_name ::= identifier

--hr
--h2 6 Scalar expressions
--/h2

--h3 6.1 data_type (p161)
--/h3

data_type ::=
		predefined_type
	|	row_type
	|	path-resolved_user-defined_type_name
	|	reference_type
	|	collection_type

predefined_type ::=
		character_string_type [ CHARACTER SET character_set_specification ] [ collate_clause ]
	|	national_character_string_type [ collate_clause ]
	|	binary_large_object_string_type
	|	numeric_type
	|	boolean_type
	|	datetime_type
	|	interval_type

character_string_type ::=
		CHARACTER [ left_paren length right_paren ]
	|	CHAR [ left_paren length right_paren ]
	|	CHARACTER VARYING left_paren length right_paren
	|	CHAR VARYING left_paren length right_paren
	|	VARCHAR left_paren length right_paren
	|	CHARACTER LARGE OBJECT [ left_paren large_object_length right_paren ]
	|	CHAR LARGE OBJECT [ left_paren large_object_length right_paren ]
	|	CLOB [ left_paren large_object_length right_paren ]

national_character_string_type ::=
		NATIONAL CHARACTER [ left_paren length right_paren ]
	|	NATIONAL CHAR [ left_paren length right_paren ]
	|	NCHAR [ left_paren length right_paren ]
	|	NATIONAL CHARACTER VARYING left_paren length right_paren
	|	NATIONAL CHAR VARYING left_paren length right_paren
	|	NCHAR VARYING left_paren length right_paren
	|	NATIONAL CHARACTER LARGE OBJECT [ left_paren large_object_length right_paren ]
	|	NCHAR LARGE OBJECT [ left_paren large_object_length right_paren ]
	|	NCLOB [ left_paren large_object_length right_paren ]

binary_large_object_string_type ::=
		BINARY LARGE OBJECT [ left_paren large_object_length right_paren ]
	|	BLOB [ left_paren large_object_length right_paren ]

numeric_type ::= exact_numeric_type | approximate_numeric_type

exact_numeric_type ::=
		NUMERIC [ left_paren precision [ comma scale ] right_paren ]
	|	DECIMAL [ left_paren precision [ comma scale ] right_paren ]
	|	DEC [ left_paren precision [ comma scale ] right_paren ]
	|	SMALLINT
	|	INTEGER
	|	INT
	|	BIGINT

approximate_numeric_type ::=
		FLOAT [ left_paren precision right_paren ]
	|	REAL
	|	DOUBLE PRECISION

length ::= unsigned_integer

large_object_length ::=
		unsigned_integer [ multiplier ] [ char_length_units ]
	|	large_object_length_token [ char_length_units ]

char_length_units ::= CHARACTERS | CODE_UNITS | OCTETS

precision ::= unsigned_integer

scale ::= unsigned_integer

boolean_type ::= BOOLEAN

datetime_type ::=
		DATE
	|	TIME [ left_paren time_precision right_paren ] [ with_or_without_time_zone ]
	|	TIMESTAMP [ left_paren timestamp_precision right_paren ] [ with_or_without_time_zone ]

with_or_without_time_zone ::= WITH TIME ZONE | WITHOUT TIME ZONE

time_precision ::= time_fractional_seconds_precision

timestamp_precision ::= time_fractional_seconds_precision

time_fractional_seconds_precision ::= unsigned_integer

interval_type ::= INTERVAL interval_qualifier

row_type ::= ROW row_type_body

row_type_body ::= left_paren field_definition [ { comma field_definition }... ] right_paren

reference_type ::= REF left_paren referenced_type right_paren [ scope_clause ]

scope_clause ::= SCOPE table_name

referenced_type ::= path-resolved_user-defined_type_name

path-resolved_user-defined_type_name ::= user-defined_type_name

path-resolved_user-defined_type_name ::= user-defined_type_name

collection_type ::= array_type | multiset_type

array_type ::= data_type ARRAY [ left_bracket_or_trigraph unsigned_integer right_bracket_or_trigraph ]

multiset_type ::= data_type MULTISET

--hr
--h3 6.2 field_definition (p173)
--/h3

field_definition ::= field_name data_type [ reference_scope_check ]

--hr
--h3 6.3 value_expression_primary (p174)
--/h3

value_expression_primary ::=
		parenthesized_value_expression
	|	nonparenthesized_value_expression_primary

parenthesized_value_expression ::= left_paren value_expression right_paren

nonparenthesized_value_expression_primary ::=
		unsigned_value_specification
	|	column_reference
	|	set_function_specification
	|	window_function
	|	scalar_subquery
	|	case_expression
	|	cast_specification
	|	field_reference
	|	subtype_treatment
	|	method_invocation
	|	static_method_invocation
	|	new_specification
	|	attribute_or_method_reference
	|	reference_resolution
	|	collection_value_constructor
	|	array_element_reference
	|	multiset_element_reference
	|	routine_invocation
	|	next_value_expression

--hr
--h3 6.4 value_specification and target_specification (p176)
--/h3

value_specification ::= literal | general_value_specification

unsigned_value_specification ::= unsigned_literal | general_value_specification

general_value_specification ::=
		host_parameter_specification
	|	SQL_parameter_reference
	|	dynamic_parameter_specification
	|	embedded_variable_specification
	|	current_collation_specification
	|	CURRENT_DEFAULT_TRANSFORM_GROUP
	|	CURRENT_PATH
	|	CURRENT_ROLE
	|	CURRENT_TRANSFORM_GROUP_FOR_TYPE path-resolved_user-defined_type_name
	|	CURRENT_USER
	|	SESSION_USER
	|	SYSTEM_USER
	|	USER
	|	VALUE

simple_value_specification ::=
		literal
	|	host_parameter_name
	|	SQL_parameter_reference
	|	embedded_variable_name

target_specification ::=
		host_parameter_specification
	|	SQL_parameter_reference
	|	column_reference
	|	target_array_element_specification
	|	dynamic_parameter_specification
	|	embedded_variable_specification

simple_target_specification ::=
		host_parameter_specification
	|	SQL_parameter_reference
	|	column_reference
	|	embedded_variable_name

host_parameter_specification ::= host_parameter_name [ indicator_parameter ]

dynamic_parameter_specification ::= question_mark

embedded_variable_specification ::= embedded_variable_name [ indicator_variable ]

indicator_variable ::= [ INDICATOR ] embedded_variable_name

indicator_parameter ::= [ INDICATOR ] host_parameter_name

target_array_element_specification ::=
		target_array_reference left_bracket_or_trigraph simple_value_specification right_bracket_or_trigraph 

target_array_reference ::= SQL_parameter_reference | column_reference

current_collation_specification ::= CURRENT_COLLATION left_paren string_value_expression right_paren

--hr
--h3 6.5 contextually_typed_value_specification (p181)
--/h3

contextually_typed_value_specification ::=
		implicitly_typed_value_specification | default_specification

implicitly_typed_value_specification ::= null_specification | empty_specification

null_specification ::= NULL

empty_specification ::=
		ARRAY left_bracket_or_trigraph right_bracket_or_trigraph
	|	MULTISET left_bracket_or_trigraph right_bracket_or_trigraph

default_specification ::= DEFAULT

--hr
--h3 6.6 identifier_chain (p183)
--/h3

identifier_chain ::= identifier [ { period identifier }... ]

basic_identifier_chain ::= identifier_chain

--hr
--h3 6.7 column_reference (p187)
--/h3

column_reference ::=
		basic_identifier_chain
	|	MODULE period qualified_identifier period column_name

--hr
--h3 6.8 SQL_parameter_reference (p190)
--/h3

SQL_parameter_reference ::= basic_identifier_chain

--hr
--h3 6.9 set_function_specification (p191)
--/h3

set_function_specification ::= aggregate_function | grouping_operation

grouping_operation ::= GROUPING left_paren column_reference [ { comma column_reference }... ] right_paren

--hr
--h3 6.10 window_function (p193)
--/h3

window_function ::= window_function_type OVER window_name_or_specification

window_function_type ::=
		rank_function_type left_paren right_paren
	|	ROW_NUMBER left_paren right_paren
	|	aggregate_function

rank_function_type ::= RANK | DENSE_RANK | PERCENT_RANK | CUME_DIST

window_name_or_specification ::= window_name | in-line_window_specification

in-line_window_specification ::= window_specification

--hr
--h3 6.11 case_expression (p197)
--/h3


case_expression ::= case_abbreviation | case_specification

case_abbreviation ::=
		NULLIF left_paren value_expression comma value_expression right_paren
	|	COALESCE left_paren value_expression { comma value_expression }... right_paren

case_specification ::= simple_case | searched_case

simple_case ::= CASE case_operand simple_when_clause... [ else_clause ] END

searched_case ::= CASE searched_when_clause... [ else_clause ] END

simple_when_clause ::= WHEN when_operand THEN result

searched_when_clause ::= WHEN search_condition THEN result

else_clause ::= ELSE result

case_operand ::= row_value_predicand | overlaps_predicate_part

when_operand ::=
		row_value_predicand
	|	comparison_predicate_part_2
	|	between_predicate_part_2
	|	in_predicate_part_2
	|	character_like_predicate_part_2
	|	octet_like_predicate_part_2
	|	similar_predicate_part_2
	|	null_predicate_part_2
	|	quantified_comparison_predicate_part_2
	|	match_predicate_part_2
	|	overlaps_predicate_part_2
	|	distinct_predicate_part_2
	|	member_predicate_part_2
	|	submultiset_predicate_part_2
	|	set_predicate_part_2
	|	type_predicate_part_2

result ::= result_expression | NULL

result_expression ::= value_expression

--hr
--h3 6.12 cast_specification (p200)
--/h3

cast_specification ::= CAST left_paren cast_operand AS cast_target right_paren

cast_operand ::= value_expression | implicitly_typed_value_specification

cast_target ::= domain_name | data_type

--hr
--h3 6.13 next_value_expression (p216)
--/h3

next_value_expression ::= NEXT VALUE FOR sequence_generator_name

--hr
--h3 6.14 field_reference (p218)
--/h3

field_reference ::= value_expression_primary period field_name

--hr
--h3 6.15 subtype_treatment (p219)
--/h3

subtype_treatment ::=
		TREAT left_paren subtype_operand AS target_subtype right_paren

subtype_operand ::= value_expression

target_subtype ::=
		path-resolved_user-defined_type_name
	|	reference_type

--hr
--h3 6.16 method_invocation (p221)
--/h3

method_invocation ::= direct_invocation | generalized_invocation

direct_invocation ::=
		value_expression_primary period method_name [ SQL_argument_list ]

generalized_invocation ::=
		left_paren value_expression_primary AS data_type right_paren period method_name
		[ SQL_argument_list ]

method_selection ::= routine_invocation

constructor_method_selection ::= routine_invocation

--hr
--h3 6.17 static_method_invocation (p223)
--/h3

static_method_invocation ::=
		path-resolved_user-defined_type_name double_colon method_name [ SQL_argument_list ]

static_method_selection ::= routine_invocation

--hr
--h3 6.18 new_specification (p225)
--/h3

new_specification ::= NEW routine_invocation

new_invocation ::= method_invocation | routine_invocation

--hr
--h3 6.19 attribute_or_method_reference (p227)
--/h3

attribute_or_method_reference ::=
		value_expression_primary dereference_operator qualified_identifier
		[ SQL_argument_list ]

dereference_operator ::= right_arrow

--hr
--h3 6.20 dereference_operation (p229)
--/h3

dereference_operation ::= reference_value_expression dereference_operator attribute_name

--hr
--h3 6.21 method_reference (p230)
--/h3

method_reference ::=
		value_expression_primary dereference_operator method_name SQL_argument_list

--hr
--h3 6.22 reference_resolution (p232)
--/h3

reference_resolution ::= DEREF left_paren reference_value_expression right_paren

--hr
--h3 6.23 array_element_reference (p234)
--/h3

array_element_reference ::=
		array_value_expression left_bracket_or_trigraph numeric_value_expression right_bracket_or_trigraph 

--hr
--h3 6.24 multiset_element_reference (p235)
--/h3
	
multiset_element_reference ::=
		ELEMENT left_paren multset_value_expression right_paren

--h3 6.25 value_expression (p236)
--/h3

--p
Specify a value.
--/p

value_expression ::=
		common_value_expression
	|	boolean_value_expression
	|	row_value_expression

common_value_expression ::=
		numeric_value_expression
	|	string_value_expression
	|	datetime_value_expression
	|	interval_value_expression
	|	user-defined_type_value_expression
	|	reference_value_expression
	|	collection_value_expression

user-defined_type_value_expression ::= value_expression_primary

reference_value_expression ::= value_expression_primary

collection_value_expression ::= array_value_expression | multiset_value_expression

collection_value_constructor ::= array_value_constructor | multiset_value_constructor

--h3 6.26 numeric_value_expression (p240)
--/h3

--p
Specify a numeric value.
--/p

numeric_value_expression ::=
		term
	|	numeric_value_expression plus_sign term
	|	numeric_value_expression minus_sign term

term ::=
		factor
	|	term asterisk factor
	|	term solidus factor

factor ::= [ sign ] numeric_primary

numeric_primary ::=
		value_expression_primary
	|	numeric_value_function

--h3 6.27 numeric_value_function (p242)
--/h3

--p
Specify a function yielding a value of type numeric.
--/p

numeric_value_function ::=
		position_expression
	|	extract_expression
	|	length_expression
	|	cardinality_expression
	|	absolute_value_expression
	|	modulus_expression
	|	natural_logarithm
	|	exponential_function
	|	power_function
	|	square_root
	|	floor_function
	|	ceiling_function
	|	width_bucket_function

position_expression ::=
		string_position_expression
	|	blob_position_expression

string_position_expression ::=
		POSITION left_paren string_value_expression IN string_value_expression [ USING char_length_units ] right_paren

blob_position_expression ::=
		POSITION left_paren blob_value_expression IN blob_value_expression right_paren

length_expression ::=
		char_length_expression
	|	octet_length_expression

char_length_expression ::=
		{ CHAR_LENGTH | CHARACTER_LENGTH } left_paren string_value_expression [ USING char_length_units ] right_paren

octet_length_expression ::= OCTET_LENGTH left_paren string_value_expression right_paren

extract_expression ::= EXTRACT left_paren extract_field FROM extract_source right_paren

extract_field ::= primary_datetime_field | time_zone_field

time_zone_field ::= TIMEZONE_HOUR | TIMEZONE_MINUTE

extract_source ::= datetime_value_expression | interval_value_expression

cardinality_expression ::= CARDINALITY left_paren collection_value_expression right_paren

absolute_value_expression ::= ABS left_paren numeric_value_expression right_paren

modulus_expression ::= MOD left_paren numeric_value_expression_dividend comma numeric_value_expression_divisorright_paren

natural_logarithm ::= LN left_paren numeric_value_expression right_paren

exponential_function ::= EXP left_paren numeric_value_expression right_paren

power_function ::= POWER left_paren numeric_value_expression_base comma numeric_value_expression_exponent right_paren

numeric_value_expression_base ::= numeric_value_expression

numeric_value_expression_exponent ::= numeric_value_expression

square_root ::= SQRT left_paren numeric_value_expression right_paren

floor_function ::= FLOOR left_paren numeric_value_expression right_paren

ceiling_function ::= { CEIL | CEILING } left_paren numeric_value_expression right_paren

width_bucket_function ::= WIDTH_BUCKET left_paren width_bucket_operand comma width_bucket_bound_1 comma width_bucket_bound_2 comma width_bucket_count right_paren

width_bucket_operand ::= numeric_value_expression

width_bucket_bound_1 ::= numeric_value_expression

width_bucket_bound_2 ::= numeric_value_expression

width_bucket_count ::= numeric_value_expression

--h3 6.28 string_value_expression (p251)
--/h3

--p
Specify a character string value or a binary string value.
--/p

string_value_expression ::= character_value_expression | blob_value_expression

character_value_expression ::= concatenation | character_factor

concatenation ::= character_value_expression concatenation_operator character_factor

character_factor ::= character_primary [ collate_clause ]

character_primary ::= value_expression_primary | string_value_function

blob_value_expression ::= blob_concatenation | blob_factor

blob_factor ::= blob_primary

blob_primary ::= value_expression_primary | string_value_function

blob_concatenation ::= blob_value_expression concatenation_operator blob_factor

--h3 6.29 string_value_function (p255)
--/h3

--p
Specify a function yielding a value of type character string or binary string.
--/p

string_value_function ::= character_value_function | blob_value_function

character_value_function ::=
		character_substring_function
	|	regular_expression_substring_function
	|	fold
	|	transcoding
	|	character_transliteration
	|	trim_function
	|	character_overlay_function
	|	normalize_function
	|	specific_type_method

character_substring_function ::=
		SUBSTRING left_paren character_value_expression FROM start_position
		[ FOR string_length ] [ USING char_length_units ] right_paren

regular_expression_substring_function ::=
		SUBSTRING left_paren character_value_expression
		SIMILAR character_value_expression ESCAPE escape_character right_paren

fold ::= { UPPER | LOWER } left_paren character_value_expression right_paren

transcoding ::= CONVERT left_paren character_value_expression USING transcoding_name right_paren

character_transliteration ::= TRANSLATE left_paren character_value_expression USING transliteration_name right_paren

trim_function ::= TRIM left_paren trim_operands right_paren

trim_operands ::= [ [ trim_specification ] [ trim_character ] FROM ] trim_source

trim_source ::= character_value_expression

trim_specification ::= LEADING | TRAILING | BOTH

trim_character ::= character_value_expression

character_overlay_function ::= 
		OVERLAY left_paren character_value_expression PLACING character_value_expression
		FROM start_position [ FOR string_length ] [ USING char_length_units ] right_paren

normalize_function ::= NORMALIZE left_paren character_value_expression right_paren

specific_type_method ::= user-defined_type_value_expression period SPECIFICTYPE

blob_value_function ::=
		blob_substring_function
	|	blob_trim_function
	|	blob_overlay_function

blob_substring_function ::=
		SUBSTRING left_paren blob_value_expression FROM start_position [ FOR string_length ] right_paren

blob_trim_function ::= TRIM left_paren blob_trim_operands right_paren

blob_trim_operands ::= [ [ trim_specification ] [ trim_octet ] FROM ] blob_trim_source

blob_trim_source ::= blob_value_expression

trim_octet ::= blob_value_expression

blob_overlay_function ::=
		OVERLAY left_paren blob_value_expression PLACING blob_value_expression
		FROM start_position [ FOR string_length ] right_paren

start_position ::= numeric_value_expression

string_length ::= numeric_value_expression

--h3 6.30 datetime_value_expression (p266)
--/h3

--p
Specify a datetime value.
--/p

datetime_value_expression ::=
		datetime_term
	|	interval_value_expression plus_sign datetime_term
	|	datetime_value_expression plus_sign interval_term
	|	datetime_value_expression minus_sign interval_term

datetime_term ::= datetime_factor

datetime_factor ::= datetime_primary [ time_zone ]

datetime_primary ::= value_expression_primary | datetime_value_function

time_zone ::= AT time_zone_specifier

time_zone_specifier ::= LOCAL | TIME ZONE interval_primary

--h3 6.31 datetime_value_function (p269)
--/h3

--p
Specify a function yielding a value of type datetime.
--/p

datetime_value_function ::=
		current_date_value_function
	|	current_time_value_function
	|	current_timestamp_value_function
	|	current_local_time_value_function
	|	current_local_timestamp_value_function

current_date_value_function ::= CURRENT_DATE

current_time_value_function ::= CURRENT_TIME [ left_paren time_precision right_paren ]

current_local_time_value_function ::= LOCALTIME [ left_paren time_precision right_paren ]

current_timestamp_value_function ::= CURRENT_TIMESTAMP [ left_paren timestamp_precision right_paren ]

current_local_timestamp_value_function ::= LOCALTIMESTAMP [ left_paren timestamp_precision right_paren ]

--h3 6.32 interval_value_expression (p271)
--/h3

--p 
Specify an interval value.
--/p

interval_value_expression ::=
		interval_term
	|	interval_value_expression_1 plus_sign interval_term_1
	|	interval_value_expression_1 minus_sign interval_term_1
	|	left_paren datetime_value_expression minus_sign datetime_term right_paren interval_qualifier

interval_term ::=
		interval_factor
	|	interval_term_2 asterisk factor
	|	interval_term_2 solidus factor
	|	term asterisk interval_factor

interval_factor ::= [ sign ] interval_primary

interval_primary ::=
		value_expression_primary [ interval_qualifier ]
	|	interval_value_function

interval_value_expression_1 ::= interval_value_expression

interval_term_1 ::= interval_term

interval_term_2 ::= interval_term

--h3 6.33 interval_value_function (p276)
--/h3

interval_value_function ::= interval_absolute_value_function

interval_absolute_value_function ::= ABS left_paren interval_value_expression right_paren

--h3 6.34 boolean_value_expression (p277)
--/h3

boolean_value_expression ::=
		boolean_term
	|	boolean_value_expression OR boolean_term

boolean_term ::=
		boolean_factor
	|	boolean_term AND boolean_factor

boolean_factor ::= [ NOT ] boolean_test

boolean_test ::= boolean_primary [ IS [ NOT ] truth_value ]

truth_value ::= TRUE | FALSE | UNKNOWN

boolean_primary ::= predicate | boolean_predicand

boolean_predicand ::=
		parenthesized_boolean_value_expression
	|	nonparenthesized_value_expression_primary

parenthesized_boolean_value_expression ::= left_paren boolean_value_expression right_paren

--h3 6.35 array_value_expression (p284)
--/h3

array_value_expression ::= array_concatenation | array_factor

array_concatenation ::= array_value_expression_1 concatenation_operator array_factor

array_value_expression_1 ::= array_value_expression

array_factor ::= value_expression_primary

--h3 6.36 array_value_constructor (p284)
--/h3

array_value_constructor ::=
		array_value_constructor_by_enumeration
	|	array_value_constructor_by_query

array_value_constructor_by_enumeration ::=
		ARRAY left_bracket_or_trigraph array_element_list right_bracket_or_trigraph

array_element_list ::= array_element [ { comma array_element }... ]

array_element ::= value_expression

array_value_constructor_by_query ::=
		ARRAY left_paren query_expression [ order_by_clause ] right_paren

--h3 6.37 multiset_value_expression (p286)
--/h3

multiset_value_expression ::=
		multiset_term
	|	multiset_value_expression MULTISET UNION [ ALL | DISTINCT ] multiset_term
	|	multiset_value_expression MULTISET EXCEPT [ ALL | DISTINCT ] multiset_term

multiset_term ::=
		multiset_primary
	|	multiset_term MULTISET INTERSECT [ ALL | DISTINCT ] multiset_primary

multiset_primary ::= multiset_value_function | value_expression_primary

--h3 6.38 multiset_value_function (p289)
--/h3

multiset_value_function ::= multiset_set_function

multiset_set_function ::= SET left_paren multiset_value_expression right_paren

--h3 6.39 multiset_value_constructor (p290)
--/h3

multiset_value_constructor ::=
		multiset_value_constructor_by_enumeration
	|	multiset_value_constructor_by_query
	|	table_value_constructor_by_query

multiset_value_constructor_by_enumeration ::= MULTISET left_bracket_or_trigraph multiset_element_list right_bracket_or_trigraph

multiset_element_list ::= multiset_element [ { comma multiset_element } ]

multiset_element ::= value_expression

multiset_value_constructor_by_query ::= MULTISET left_paren query_expression right_paren

table_value_constructor_by_query ::= TABLE left_paren query_expression right_paren

--hr
--h2 7 Query expressions
--/h2

--h3 7.1 row_value_constructor (p293)
--/h3

Specify a value or list of values to be constructed into a row or partial row.

row_value_constructor ::=
		common_value_expression
	|	boolean_value_expression
	|	explicit_row_value_constructor

explicit_row_value_constructor ::=
		left_paren row_value_constructor_element comma row_value_constructor_element_list right_paren
	|	ROW left_paren row_value_constructor_element_list right_paren
	|	row_subquery

row_value_constructor_element_list ::=
		row_value_constructor_element [ { comma row_value_constructor_element }... ]

row_value_constructor_element ::= value_expression

contextually_typed_row_value_constructor ::=
		common_value_expression
	|	boolean_value_expression
	|	contextually_typed_value_specification
	|	left_paren contextually_typed_row_value_constructor_element comma contextually_typed_row_value_constructor_element_list right_paren
	|	ROW left_paren contextually_typed_row_value_constructor_element_list right_paren

contextually_typed_row_value_constructor_element_list ::=
		contextually_typed_row_value_constructor_element
		[ { comma contextually_typed_row_value_constructor_element }... ]

contextually_typed_row_value_constructor_element ::=
		value_expression
	|	contextually_typed_value_specification

row_value_constructor_predicand ::=
		common_value_expression
	|	boolean_predicand
	|	explicit_row_value_constructor

--h3 7.2 row_value_expression (p296)
--/h3

--p 
Specify a row value.
--/p

row_value_expression ::=
		row_value_special_case
	|	explicit_row_value_constructor

table_row_value_expression ::=
		row_value_special_case
	|	row_value_constructor

contextually_typed_row_value_expression ::=
		row_value_special_case
	|	contextually_typed_row_value_constructor

row_value_predicand ::=
		row_value_special_case
	|	row_value_constructor_predicand

row_value_special_case ::= nonparenthesized_value_expression_primary

--h3 7.3 table_value_constructor (p298)
--/h3

--p 
Specify a set of row_value_expressions to be constructed into a table.
--/p

table_value_constructor ::= VALUES row_value_expression_list

row_value_expression_list ::= table_row_value_expression [ { comma table_row_value_expression }... ]

contextually_typed_table_value_constructor ::= VALUES contextually_typed_row_value_expression_list

contextually_typed_row_value_expression_list ::= contextually_typed_row_value_expression [ { comma contextually_typed_row_value_expression }... ]

--h3 7.4 table_expression (p300)
--/h3

--p 
Specify a table or a grouped table.
--/p

table_expression ::=
		from_clause
		[ where_clause ]
		[ group_by_clause ]
		[ having_clause ]
		[ window_clause ]

--h3 7.5 from_clause (p301)
--/h3

--p 
Specify a table derived from one or more tables.
--/p

from_clause ::= FROM table_reference_list

table_reference_list ::= table_reference [ { comma table_reference }... ]

--h3 7.6 table_reference (p303)
--/h3

--p 
Reference a table.
--/p

table_reference ::= table_primary_or_joined_table [ sample_clause ]

table_primary_or_joined_table ::= table_primary | joined_table

sample_clause ::=
		TABLESAMPLE sample_method left_paren sample_percentage right_paren [ repeatable_clause ]

sample_method ::= BERNOULLI | SYSTEM

repeatable_clause ::= REPEATABLE left_paren repeat_argument right_paren

sample_percentage ::= numeric_value_expression

repeat_argument ::= numeric_value_expression

table_primary ::=
		table_or_query_name [ [ AS ] correlation_name [ left_paren derived_column_list right_paren ] ]
	|	derived_table [ AS ] correlation_name [ left_paren derived_column_list right_paren ]
	|	lateral_derived_table [ AS ] correlation_name [ left_paren derived_column_list right_paren ]
	|	collection_derived_table [ AS ] correlation_name [ left_paren derived_column_list right_paren ]
	|	table_function_derived_table [ AS ] correlation_name [ left_paren derived_column_list right_paren ]
	|	only_spec [ [ AS ] correlation_name [ left_paren derived_column_list right_paren ] ]
	|	left_paren joined_table right_paren

only_spec ::= ONLY left_paren table_or_query_name right_paren

lateral_derived_table ::= LATERAL table_subquery

collection_derived_table ::= UNNEST left_paren collection_value_expression right_paren [ WITH ORDINALITY ]

table_function_derived_table ::= TABLE left_paren collection_value_expression right_paren

derived_table ::= table_subquery

table_or_query_name ::= table_name | query_name

derived_column_list ::= column_name_list

column_name_list ::= column_name [ { comma column_name }... ]

--h3 7.7 joined_table (p312)
--/h3

--p 
Specify a table derived from a Cartesian product, inner or outer join, or union join.
--/p

joined_table ::=
		cross_join
	|	qualified_join
	|	natural_join
	|	union_join

cross_join ::= table_reference CROSS JOIN table_primary

qualified_join ::= table_reference [ join_type ] JOIN table_reference join_specification

natural_join ::= table_reference NATURAL [ join_type ] JOIN table_primary

union_join ::= table_reference UNION JOIN table_primary

join_specification ::= join_condition | named_columns_join

join_condition ::= ON search_condition

named_columns_join ::= USING left_paren join_column_list right_paren

join_type ::= INNER | outer_join_type [ OUTER ] 

outer_join_type ::= LEFT | RIGHT | FULL

join_column_list ::= column_name_list

--h3 7.8 where_clause (p319)
--/h3

--p 
Specify a table derived by the application of a search_condition to the result of the preceding
from_clause.
--/p

where_clause ::= WHERE search_condition

--h3 7.9 group_by_clause (p320)
--/h3

--p 
Specify a grouped table derived by the application of the group_by_clause to the result of the
previously specified clause.
--/p

group_by_clause ::= GROUP BY [ set_quantifier ] grouping_element_list

grouping_element_list ::= grouping_element [ { comma grouping_element }... ]

grouping_element ::=
		ordinary_grouping_set
	|	rollup_list
	|	cube_list
	|	grouping_sets_specification
	|	empty_grouping_set

ordinary_grouping_set ::=
		grouping_column_reference
	|	left_paren grouping_column_reference_list right_paren

grouping_column_reference ::= column_reference [ collate_clause ]

grouping_column_reference_list ::= grouping_column_reference [ { comma grouping_column_reference }... ]

rollup_list ::= ROLLUP left_paren ordinary_grouping_set_list right_paren

ordinary_grouping_set_list ::= ordinary_grouping_set [ { comma ordinary_grouping_set }... ]

cube_list ::= CUBE left_paren ordinary_grouping_set_list right_paren

grouping_sets_specification ::= GROUPING SETS left_paren grouping_set_list right_paren

grouping_set_list ::= grouping_set [ { comma grouping_set }... ]

grouping_set ::=
		ordinary_grouping_set
	|	rollup_list
	|	cube_list
	|	grouping_sets_specification
	|	empty_grouping_set

empty_grouping_set ::= left_paren right_paren

--h3 7.10 having_clause (p329)
--/h3

--p 
Specify a grouped table derived by the elimination of groups that do not satisfy a search_condition.
--/p

having_clause ::= HAVING search_condition

--h3 7.11 window_clause (p331)
--/h3

--p 
Specify one or more window definitions.
--/p

window_clause ::= WINDOW window_definition_list

window_definition_list ::= window_definition [ { comma window_definition }... ]

window_definition ::= new_window_name AS window_specification

new_window_name ::= window_name

window_specification ::= left_paren window_specification_details right_paren

window_specification_details ::=
		[ existing_window_name ] [ window_partition_clause ] [ window_order_clause ] [ window_frame_clause ]

existing_window_name ::= window_name

window_partition_clause ::= PARTITION BY window_partition_column_reference_list

window_partition_column_reference_list ::= window_partition_column_reference [ { comma window_partition_column_reference }... ]

window_partition_column_reference ::= column_reference [ collate_clause ]

window_order_clause ::= ORDER BY sort_specification_list

window_frame_clause ::= window_frame_units window_frame_extent [ window_frame_exclusion ]

window_frame_units ::= ROWS | RANGE

window_frame_extent ::= window_frame_start | window_frame_between

window_frame_start ::= UNBOUNDED PRECEDING | window_frame_preceding | CURRENT ROW

window_frame_preceding ::= unsigned_value_specification PRECEDING

window_frame_between ::= BETWEEN window_frame_bound_1 AND window_frame_bound_2

window_frame_bound_1 ::= window_frame_bound

window_frame_bound_2 ::= window_frame_bound

window_frame_bound ::=
		window_frame_start
	|	UNBOUNDED FOLLOWING
	|	window_frame_following

window_frame_following ::= unsigned_value_specification FOLLOWING

window_frame_exclusion ::=
		EXCLUDE CURRENT ROW
	|	EXCLUDE GROUP
	|	EXCLUDE TIES
	|	EXCLUDE NO OTHERS

--h3 7.12 query_specification (p341)
--/h3

--p 
Specify a table derived from the result of a table_expression.
--/p

query_specification ::= SELECT [ set_quantifier ] select_list table_expression

select_list ::= asterisk | select_sublist [ { comma select_sublist }... ]

select_sublist ::= derived_column | qualified_asterisk

qualified_asterisk ::=
		asterisked_identifier_chain period asterisk
	|	all_fields_reference

asterisked_identifier_chain ::= asterisked_identifier [ { period asterisked_identifier }... ]

asterisked_identifier ::= identifier

derived_column ::= value_expression [ as_clause ]

as_clause ::= [ AS ] column_name

all_fields_reference ::= value_expression_primary period asterisk [ AS left_paren all_fields_column_name_list right_paren ]

all_fields_column_name_list ::= column_name_list

--h3 7.13 query_expression (p350)
--/h3

--p 
Specify a table.
--/p

query_expression ::= [ with_clause ] query_expression_body

with_clause ::= WITH [ RECURSIVE ] with_list

with_list ::= with_list_element [ { comma with_list_element }... ]

with_list_element ::=
		query_name [ left_paren with_column_list right_paren ]
		AS left_paren query_expression right_paren [ search_or_cycle_clause ]

with_column_list ::= column_name_list

query_expression_body ::= non-join_query_expression | joined_table

non-join_query_expression ::=
		non-join_query_term
	|	query_expression_body UNION [ ALL | DISTINCT ] [ corresponding_spec ] query_term
	|	query_expression_body EXCEPT [ ALL | DISTINCT ] [ corresponding_spec ] query_term

query_term ::= non-join_query_term | joined_table

non-join_query_term ::=
		non-join_query_primary
	|	query_term INTERSECT [ ALL | DISTINCT ] [ corresponding_spec ] query_primary

query_primary ::= non-join_query_primary | joined_table

non-join_query_primary ::= simple_table | left_paren non-join_query_expression right_paren

simple_table ::=
		query_specification
	|	table_value_constructor
	|	explicit_table

explicit_table ::= TABLE table_or_query_name

corresponding_spec ::= CORRESPONDING [ BY left_paren corresponding_column_list right_paren ]

corresponding_column_list ::= column_name_list

--h3 7.14 search_or_cycle_clause (p363)
--/h3

--p 
Specify the generation of ordering and cycle detection information in the result of recursive query
expressions.
--/p

search_or_cycle_clause ::=
		search_clause
	|	cycle_clause
	|	search_clause cycle_clause

search_clause ::= SEARCH recursive_search_order SET sequence_column

recursive_search_order ::=
		DEPTH FIRST BY sort_specification_list
	|	BREADTH FIRST BY sort_specification_list

sequence_column ::= column_name

cycle_clause ::=
		CYCLE cycle_column_list
		SET cycle_mark_column TO cycle_mark_value
		DEFAULT non-cycle_mark_value
		USING path_column

cycle_column_list ::= cycle_column [ { comma cycle_column }... ]

cycle_column ::= column_name

cycle_mark_column ::= column_name

path_column ::= column_name

cycle_mark_value ::= value_expression

non-cycle_mark_value ::= value_expression

--h3 7.15 subquery (p368)
--/h3

--p 
Specify a scalar value, a row, or a table derived from a query_expression.
--/p

scalar_subquery ::= subquery

row_subquery ::= subquery

table_subquery ::= subquery

subquery ::= left_paren query_expression right_paren

--hr
--h2 8 Predicates
--/h2

--h3 8.1 predicate (p371)
--/h3

--p 
Specify a condition that can be evaluated to give a boolean value.
--/p

predicate ::=
		comparison_predicate
	|	between_predicate
	|	in_predicate
	|	like_predicate
	|	similar_predicate
	|	null_predicate
	|	quantified_comparison_predicate
	|	exists_predicate
	|	unique_predicate
	|	normalized_predicate
	|	match_predicate
	|	overlaps_predicate
	|	distinct_predicate
	|	member_predicate
	|	submultiset_predicate
	|	set_predicate
	|	type_predicate

--h3 8.2 comparison_predicate (p373)
--/h3

--p 
Specify a comparison of two row values.
--/p

comparison_predicate ::= row_value_predicand comparison_predicate_part_2

comparison_predicate_part_2 ::= comp_op row_value_predicand

comp_op ::=
		equals_operator
	|	not_equals_operator
	|	less_than_operator
	|	greater_than_operator
	|	less_than_or_equals_operator
	|	greater_than_or_equals_operator

--h3 8.3 between_predicate (p380)
--/h3

--p 
Specify a range comparison.
--/p

between_predicate ::= row_value_predicand between_predicate_part_2

between_predicate_part_2 ::= [ NOT ] BETWEEN [ ASYMMETRIC | SYMMETRIC ] row_value_predicand AND row_value_predicand

--h3 8.4 in_predicate (p381)
--/h3

--p 
Specify a quantified comparison.
--/p

in_predicate ::= row_value_predicand in_predicate_part_2 

in_predicate_part_2 ::= [ NOT ] IN in_predicate_value

in_predicate_value ::=
		table_subquery
	|	left_paren in_value_list right_paren

in_value_list ::= row_value_expression [ { comma row_value_expression }... ]

--h3 8.5 like_predicate (p383)
--/h3

--p 
Specify a pattern-match comparison.
--/p

like_predicate ::= character_like_predicate | octet_like_predicate

character_like_predicate ::= row_value_predicand character_like_predicate_part_2

character_like_predicate_part_2 ::= [ NOT ] LIKE character_pattern [ ESCAPE escape_character ]

character_pattern ::= character_value_expression

escape_character ::= character_value_expression

octet_like_predicate ::= row_value_predicand octet_like_predicate_part_2

octet_like_predicate_part_2 ::= [ NOT ] LIKE octet_pattern [ ESCAPE escape_octet ]

octet_pattern ::= blob_value_expression

escape_octet ::= blob_value_expression

--h3 8.6 similar_predicate (p389)
--/h3

--p 
Specify a character string similarity by means of a regular expression.
--/p

similar_predicate ::= row_value_predicand similar_predicate_part_2

similar_predicate_part_2 ::= [ NOT ] SIMILAR TO similar_pattern [ ESCAPE escape_character ]

similar_pattern ::= character_value_expression

regular_expression ::=
		regular_term
	|	regular_expression vertical_bar regular_term

regular_term ::=
		regular_factor
	|	regular_term regular_factor

regular_factor ::=
		regular_primary
	|	regular_primary asterisk
	|	regular_primary plus_sign
	|	regular_primary question_mark
	|	regular_primary repeat_factor

repeat_factor ::= left_brace low_value [ upper_limit ] right_brace

upper_limit ::= comma [ high_value ]

low_value ::= unsigned_integer

high_value ::= unsigned_integer

regular_primary ::=
		character_specifier
	|	percent
	|	regular_character_set
	|	left_paren regular_expression right_paren

character_specifier ::= non-escaped_character | escaped_character

non-escaped_character ::= !! See the Syntax Rules

escaped_character ::= !! See the Syntax Rules

regular_character_set ::=
		underscore
	|	left_bracket character_enumeration... right_bracket
	|	left_bracket circumflex character_enumeration... right_bracket
	|	left_bracket character_enumeration_include...  circumflex character_enumeration_exclude... right_bracket

character_enumeration_include ::= character_enumeration

character_enumeration_exclude ::= character_enumeration

character_enumeration ::=
		character_specifier
	|	character_specifier minus_sign character_specifier
	|	left_bracket colon regular_character_set_identifier colon right_bracket

regular_character_set_identifier ::= identifier

--h3 8.7 null_predicate (p395)
--/h3

--p 
Specify a test for a null value.
--/p

null_predicate ::= row_value_predicand null_predicate_part_2

null_predicate_part_2 ::= IS [ NOT ] NULL 

--h3 8.8 quantified_comparison_predicate (p397)
--/h3

--p 
Specify a quantified comparison.
--/p

quantified_comparison_predicate ::= row_value_predicand quantified_comparison_predicate_part_2

quantified_comparison_predicate_part_2 ::= comp_op quantifier table_subquery

quantifier ::= all | some

all ::= ALL

some ::= SOME | ANY

--h3 8.9 exists_predicate (p399)
--/h3

--p 
Specify a test for a non-empty set.
--/p

exists_predicate ::= EXISTS table_subquery

--h3 8.10 unique_predicate (p400)
--/h3

--p
Specify a test for the absence of duplicate rows
--/p

unique_predicate ::= UNIQUE table_subquery

--h3 8.11 normalized_predicate (p401)
--/h3

--p 
Determine whether a character string value is normalized.
--/p

normalized_predicate ::= string_value_expression IS [ NOT ] NORMALIZED

--h3 8.12 match_predicate (p402)
--/h3

--p 
Specify a test for matching rows.
--/p

match_predicate ::= row_value_predicand match_predicate_part_2

match_predicate_part_2 ::= MATCH [ UNIQUE ] [ SIMPLE | PARTIAL | FULL ] table_subquery

--h3 8.13 overlaps_predicate (p405)
--/h3

--p 
Specify a test for an overlap between two datetime periods.
--/p

overlaps_predicate ::= overlaps_predicate_part_1 overlaps_predicate_part_2

overlaps_predicate_part_1 ::= row_value_predicand_1

overlaps_predicate_part_2 ::= OVERLAPS row_value_predicand_2

row_value_predicand_1 ::= row_value_predicand

row_value_predicand_2 ::= row_value_predicand

--h3 8.14 distinct_predicate (p407)
--/h3

--p 
Specify a test of whether two row values are distinct
--/p

distinct_predicate ::= row_value_predicand_3 distinct_predicate_part_2

distinct_predicate_part_2 ::= IS DISTINCT FROM row_value_predicand_4

row_value_predicand_3 ::= row_value_predicand

row_value_predicand_4 ::= row_value_predicand

--h3 8.15 member_predicate (p409)
--/h3

--p 
Specify a test of whether a value is a member of a multiset.
--/p

member_predicate ::= row_value_predicand member_predicate_part_2

member_predicate_part_2 ::= [ NOT ] MEMBER [ OF ] multiset_value_expression

--h3 8.16 submultiset_predicate (p411)
--/h3

--p 
Specify a test of whether a multiset is a submultiset of another multiset.
--/p

submultiset_predicate ::= row_value_predicand submultiset_predicate_part_2

submultiset_predicate_part_2 ::= [ NOT ] SUBMULTISET [ OF ] multiset_value_expression

--h3 8.17 set_predicate (p413)
--/h3

--p 
Specify a test of whether a multiset is a set (that is, does not contain any duplicates).
--/p

set_predicate ::= row_value_predicand set_predicate_part_2

set_predicate_part_2 ::= IS [ NOT ] A SET

--h3 8.18 type_predicate (p414)
--/h3

--p 
Specify a type test.
--/p

type_predicate ::= row_value_predicand type_predicate_part_2

type_predicate_part_2 ::= IS [ NOT ] OF left_paren type_list right_paren

type_list ::= user-defined_type_specification [ { comma user-defined_type_specification }... ]

user-defined_type_specification ::=
		inclusive_user-defined_type_specification
	|	exclusive_user-defined_type_specification

inclusive_user-defined_type_specification ::= path-resolved_user-defined_type_name

exclusive_user-defined_type_specification ::= ONLY path-resolved_user-defined_type_name

--h3 8.19 search_condition (p416)
--/h3

--p 
Specify a condition that is True , False , or Unknown , depending on the value of a <boolean value
expression>.
--/p

search_condition ::= boolean_value_expression

--hr
--h2 9 Additional common rules
--/h2

--h3 9.1 Retrieval assignment (p417)
--/h3

--h3 9.2 Store assignment (p422)
--/h3

--h3 9.3 Data types of results of aggregations (p427)
--/h3

--h3 9.4 Subject routine determination (p430)
--/h3

--h3 9.5 Type precedence list determination (p431)
--/h3

--h3 9.6 Host parameter mode determination (p434)
--/h3

--h3 9.7 Type name determination (p436)
--/h3

--h3 9.8 Determination of identical values (p438)
--/h3

--h3 9.9 Equality operations (p440)
--/h3

--h3 9.10 Grouping operations (p443)
--/h3

--h3 9.11 Multiset element grouping operations (p445)
--/h3

--h3 9.12 Ordering operations (p447)
--/h3

--h3 9.13 Collation determination (p449)
--/h3

--h3 9.14 Execution of array-returning functions (p450)
--/h3

--h3 9.15 Execution of multiset-returning functions (p453)
--/h3

--h3 9.16 Data type identity (p454)
--/h3

--h3 9.17 Determination of a from-sql function (p456)
--/h3

--h3 9.18 Determination of a from-sql function for an overriding method (p457)
--/h3

--h3 9.19 Determination of a to-sql function (p458)
--/h3

--h3 9.20 Determination of a to-sql function for an overriding method (p459)
--/h3

--h3 9.21 Generation of the next value of a sequence generator (p460)
--/h3

--h3 9.22 Creation of a sequence generator (p461)
--/h3

--h3 9.23 Altering a sequence generator (p463)
--/h3

--hr
--h2 10 Additional common elements
--/h2

--h3 10.1 interval_qualifier (p465)
--/h3

--p 
Specify the precision of an interval data type.
--/p

interval_qualifier ::=
		start_field TO end_field
	|	single_datetime_field

start_field ::= non-second_primary_datetime_field [ left_paren interval_leading_field_precision right_paren ]

end_field ::=
		non-second_primary_datetime_field
	|	SECOND [ left_paren interval_fractional_seconds_precision right_paren ]

single_datetime_field ::=
		non-second_primary_datetime_field [ left_paren interval_leading_field_precision right_paren ]
	|	SECOND [ left_paren interval_leading_field_precision [ comma interval_fractional_seconds_precision ] right_paren ]

primary_datetime_field ::=
		non-second_primary_datetime_field
	|	SECOND

non-second_primary_datetime_field ::= YEAR | MONTH | DAY | HOUR | MINUTE

interval_fractional_seconds_precision ::= unsigned_integer

interval_leading_field_precision ::= unsigned_integer

--h3 10.2 language_clause (p469)
--/h3

--p 
Specify a standard programming language.
--/p

language_clause ::= LANGUAGE language_name

language_name ::= ADA | C | COBOL | FORTRAN | MUMPS | PASCAL | PLI | SQL

--p
Table 14 -- Standard programming languages
--/p

--## table_border=1
--## tr th Language keyword /th th Relevant standard /th /tr
--## trtdADA/tdtdISO/IEC 8652/td/tr
--## trtdC/tdtdISO/IEC 9899/td/tr
--## trtdCOBOL/tdtdISO 1989/td/tr
--## trtdFORTRAN/tdtdISO 1539/td/tr
--## trtdMUMPS/tdtdISO/IEC 11756/td/tr
--## trtdPASCAL/tdtdISO/IEC 7185 and ISO/IEC 10206/td/tr
--## trtdPLI/tdtdISO 6160/td/tr
--## trtdSQL/tdtdISO/IEC 9075/td/tr
--## /table

--h3 10.3 path_specification (p471)
--/h3

--p 
Specify an order for searching for an SQL-invoked routine.
--/p

path_specification ::= PATH schema_name_list

schema_name_list ::= schema_name [ { comma schema_name }... ]

--h3 10.4 routine_invocation (p472)
--/h3

--p 
Invoke an SQL-invoked routine.
--/p

routine_invocation ::= routine_name SQL_argument_list

routine_name ::= [ schema_name period ] qualified_identifier

SQL_argument_list ::= left_paren [ SQL_argument [ { comma SQL_argument }... ] ] right_paren

SQL_argument ::=
		value_expression
	|	generalized_expression
	|	target_specification

generalized_expression ::= value_expression AS path-resolved_user-defined_type_name

--h3 10.5 character_set_specification (p495)
--/h3

--p 
Identify a character set.
--/p

character_set_specification ::=
		standard_character_set_name
	|	implementation-defined_character_set_name
	|	user-defined_character_set_name

standard_character_set_name ::= character_set_name

implementation-defined_character_set_name ::= character_set_name

user-defined_character_set_name ::= character_set_name

--h3 10.6 specific_routine_designator (p497)
--/h3

--p 
Specify an SQL-invoked routine.
--/p

specific_routine_designator ::=
		SPECIFIC routine_type specific_name
			|	routine_type member_name
		[ FOR schema-resolved_user-defined_type_name ]

routine_type ::=
		ROUTINE
	|	FUNCTION
	|	PROCEDURE
	|	[ INSTANCE | STATIC | CONSTRUCTOR ] METHOD

member_name ::= member_name_alternatives [ data_type_list ]

member_name_alternatives ::= schema_qualified_routine_name | method_name

data_type_list ::= left_paren [ data_type [ { comma data_type }... ] ] right_paren

--h3 10.7 collate_clause (p500)
--/h3

--p 
Specify a default collating sequence.
--/p

collate_clause ::= COLLATE collation_name

--h3 10.8 constraint_name_definition and constraint_characteristics (p501)
--/h3

--p 
Specify the name of a constraint and its characteristics.
--/p

constraint_name_definition ::= CONSTRAINT constraint_name

constraint_characteristics ::=
		constraint_check_time [ [ NOT ] DEFERRABLE ]
	|	[ NOT ] DEFERRABLE [ constraint_check_time ]

constraint_check_time ::= INITIALLY DEFERRED | INITIALLY IMMEDIATE

--h3 10.9 aggregate_function (p503)
--/h3

--p 
Specify a value computed from a collection of rows.
--/p

aggregate_function ::=
		COUNT left_paren asterisk right_paren [ filter_clause ]
	|	general_set_function [ filter_clause ]
	|	binary_set_function [ filter_clause ]
	|	ordered_set_function [ filter_clause ]

general_set_function ::= set_function_type left_paren [ set_quantifier ] value_expression right_paren

set_function_type ::= computational_operation

computational_operation ::=
		AVG | MAX | MIN | SUM
	|	EVERY | ANY | SOME
	|	COUNT
	|	STDDEV_POP | STDDEV_SAMP | VAR_SAMP | VAR_POP
	|	COLLECT | FUSION | INTERSECTION

set_quantifier ::= DISTINCT | ALL

filter_clause ::= FILTER left_paren WHERE search_condition right_paren

binary_set_function ::= binary_set_function_type left_paren dependent_variable_expression comma
independent_variable_expression right_paren

binary_set_function_type ::=
		COVAR_POP | COVAR_SAMP | CORR | REGR_SLOPE
	|	REGR_INTERCEPT | REGR_COUNT | REGR_R2 | REGR_AVGX | REGR_AVGY
	|	REGR_SXX | REGR_SYY | REGR_SXY

dependent_variable_expression ::= numeric_value_expression

independent_variable_expression ::= numeric_value_expression

ordered_set_function ::= hypothetical_set_function | inverse_distribution_function

hypothetical_set_function ::= rank_function_type left_paren hypothetical_set_function_value_expression_list right_paren within_group_specification

within_group_specification ::= WITHIN GROUP left_paren ORDER BY sort_specification_list right_paren

hypothetical_set_function_value_expression_list ::= value_expression [ { comma value_expression }... ]

inverse_distribution_function ::= inverse_distribution_function_type left_paren inverse_distribution_function_argument right_paren within_group_specification

inverse_distribution_function_argument ::= numeric_value_expression

inverse_distribution_function_type ::= PERCENTILE_CONT | PERCENTILE_DISC

--h3 10.10 sort_specification_list (p515)
--/h3

--p 
Specify a sort order.
--/p

sort_specification_list ::= sort_specification [ { comma sort_specification }... ]

sort_specification ::= sort_key [ ordering_specification ] [ null_ordering ]

sort_key ::= value_expression

ordering_specification ::= ASC | DESC

null_ordering ::= NULLS FIRST | NULLS LAST

--hr
--h2 11 Schema definition and manipulation
--/h2

--h3 11.1 schema_definition (p517)
--/h3

--p 
Define a schema.
--/p

schema_definition ::= CREATE SCHEMA schema_name_clause [ schema_character_set_or_path ] [ schema_element... ]

schema_character_set_or_path ::=
		schema_character_set_specification
	|	schema_path_specification
	|	schema_character_set_specification schema_path_specification
	|	schema_path_specification schema_character_set_specification

schema_name_clause ::=
		schema_name
	|	AUTHORIZATION schema_authorization_identifier
	|	schema_name AUTHORIZATION schema_authorization_identifier

schema_authorization_identifier ::= authorization_identifier

schema_character_set_specification ::= DEFAULT CHARACTER SET character_set_specification

schema_path_specification ::= path_specification

schema_element ::=
		table_definition
	|	view_definition
	|	domain_definition
	|	character_set_definition
	|	collation_definition
	|	transliteration_definition
	|	assertion_definition
	|	trigger_definition
	|	user-defined_type_definition
	|	user-defined_cast_definition
	|	user-defined_ordering_definition
	|	transform_definition
	|	schema_routine
	|	sequence_generator_definition
	|	grant_statement
	|	role_definition

--h3 11.2 drop_schema_statement (p520)
--/h3

--p 
Destroy a schema.
--/p

drop_schema_statement ::= DROP SCHEMA schema_name drop_behavior

drop_behavior ::= CASCADE | RESTRICT

--h3 11.3 table_definition (p523)
--/h3

--p 
Define a persistent base table, a created local temporary table, or a global temporary table.
--/p

table_definition ::=
		CREATE [ table_scope ] TABLE table_name table_contents_source
		[ ON COMMIT table_commit_action ROWS ]

table_contents_source ::=
		table_element_list
	|	OF path-resolved_user-defined_type_name [ subtable_clause ] [ table_element_list ]
	|	as_subquery_clause

table_scope ::= global_or_local TEMPORARY

global_or_local ::= GLOBAL | LOCAL

table_commit_action ::= PRESERVE | DELETE

table_element_list ::= left_paren table_element [ { comma table_element }... ] right_paren

table_element ::=
		column_definition
	|	table_constraint_definition
	|	like_clause
	|	self-referencing_column_specification
	|	column_options

self-referencing_column_specification ::= REF IS self-referencing_column_name reference_generation

reference_generation ::= SYSTEM GENERATED | USER GENERATED | DERIVED

self-referencing_column_name ::= column_name

column_options ::= column_name WITH OPTIONS column_option_list

column_option_list ::= [ scope_clause ] [ default_clause ] [ column_constraint_definition... ]

subtable_clause ::= UNDER supertable_clause

supertable_clause ::= supertable_name

supertable_name ::= table_name

like_clause ::= LIKE table_name [ like_options ]

like_options ::= identity_option | column_default_option

identity_option ::= INCLUDING IDENTITY | EXCLUDING IDENTITY

column_default_option ::= INCLUDING DEFAULTS | EXCLUDING DEFAULTS

as_subquery_clause ::= [ left_paren column_name_list right_paren ] AS subquery with_or_without_data

with_or_without_data ::= WITH NO DATA | WITH DATA

--h3 11.4 column_definition (p534)
--/h3

--p 
Define a column of a base table.
--/p

column_definition ::=
		column_name [ data_type | domain_name ] [ reference_scope_check ]
		[ default_clause | identity_column_specification | generation_clause ]
		[ column_constraint_definition... ] [ collate_clause ]

column_constraint_definition ::= [ constraint_name_definition ] column_constraint [ constraint_characteristics ]

column_constraint ::=
		NOT NULL
	|	unique_specification
	|	references_specification
	|	check_constraint_definition

reference_scope_check ::= REFERENCES ARE [ NOT ] CHECKED [ ON DELETE reference_scope_check_action ]

reference_scope_check_action ::= referential_action

identity_column_specification ::=
		GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY
		[ left_paren common_sequence_generator_options right_paren ]

generation_clause ::= generation_rule AS generation_expression

generation_rule ::= GENERATED ALWAYS

generation_expression ::= left_paren value_expression right_paren

--h3 11.5 default_clause (p539)
--/h3

--p 
Specify the default for a column, domain, or attribute.
--/p

default_clause ::= DEFAULT default_option

default_option ::=
		literal
	|	datetime_value_function
	|	USER
	|	CURRENT_USER
	|	CURRENT_ROLE
	|	SESSION_USER
	|	SYSTEM_USER
	|	CURRENT_PATH
	|	implicitly_typed_value_specification

--h3 11.6 table_constraint_definition (p543)
--/h3

--p 
Specify an integrity constraint.
--/p

table_constraint_definition ::= [ constraint_name_definition ] table_constraint [ constraint_characteristics ]

table_constraint ::=
		unique_constraint_definition
	|	referential_constraint_definition
	|	check_constraint_definition

--h3 11.7 unique_constraint_definition (p545)
--/h3

--p 
Specify a uniqueness constraint for a table.
--/p

unique_constraint_definition ::=
		unique_specification left_paren unique_column_list right_paren
	|	UNIQUE ( VALUE )

unique_specification ::= UNIQUE | PRIMARY KEY

unique_column_list ::= column_name_list

--h3 11.8 referential_constraint_definition (p547)
--/h3

--p 
Specify a referential constraint.
--/p

referential_constraint_definition ::= FOREIGN KEY left_paren referencing_columns right_paren references_specification

references_specification ::= REFERENCES referenced_table_and_columns [ MATCH match_type ] [ referential_triggered_action ]

match_type ::= FULL | PARTIAL | SIMPLE

referencing_columns ::= reference_column_list

referenced_table_and_columns ::= table_name [ left_paren reference_column_list right_paren ]

reference_column_list ::= column_name_list

referential_triggered_action ::= update_rule [ delete_rule ] | delete_rule [ update_rule ]

update_rule ::= ON UPDATE referential_action

delete_rule ::= ON DELETE referential_action

referential_action ::= CASCADE | SET NULL | SET DEFAULT | RESTRICT | NO ACTION

--h3 11.9 check_constraint_definition (p567)
--/h3

--p 
Specify a condition for the SQL-data.
--/p

check_constraint_definition ::= CHECK left_paren search_condition right_paren

--h3 11.10 alter_table_statement (p569)
--/h3

--p 
Change the definition of a table.
--/p

alter_table_statement ::= ALTER TABLE table_name alter_table_action

alter_table_action ::=
		add_column_definition
	|	alter_column_definition
	|	drop_column_definition
	|	add_table_constraint_definition
	|	drop_table_constraint_definition

--h3 11.11 add_column_definition (p570)
--/h3

--p 
Add a column to a table.
--/p

add_column_definition ::= ADD [ COLUMN ] column_definition

--h3 11.12 alter_column_definition (p572)
--/h3

--p 
Change a column and its definition.
--/p

alter_column_definition ::= ALTER [ COLUMN ] column_name alter_column_action

alter_column_action ::=
		set_column_default_clause
	|	drop_column_default_clause
	|	add_column_scope_clause
	|	drop_column_scope_clause
	|	alter_identity_column_specification

--h3 11.13 set_column_default_clause (p573)
--/h3

--p 
Set the default clause for a column.
--/p

set_column_default_clause ::= SET default_clause

--h3 11.14 drop_column_default_clause (p574)
--/h3

--p 
Drop the default clause from a column.
--/p

drop_column_default_clause ::= DROP DEFAULT

--h3 11.15 add_column_scope_clause (p575)
--/h3

--p 
Add a non-empty scope for an existing column of data type REF in a base table.
--/p

add_column_scope_clause ::= ADD scope_clause

--h3 11.16 drop_column_scope_clause (p576)
--/h3

--p 
Drop the scope from an existing column of data type REF in a base table.
--/p

drop_column_scope_clause ::= DROP SCOPE drop_behavior

--h3 11.17 alter_identity_column_specification (p578)
--/h3

--p 
Change the options specified for an identity column.
--/p

alter_identity_column_specification ::= alter_identity_column_option...

alter_identity_column_option ::=
		alter_sequence_generator_restart_option
	|	SET basic_sequence_generator_option

--h3 11.18 drop_column_definition (p579)
--/h3

--p 
Destroy a column of a base table.
--/p

drop_column_definition ::= DROP [ COLUMN ] column_name drop_behavior

--h3 11.19 add_table_constraint_definition (p581)
--/h3

--p 
Add a constraint to a table.
--/p

add_table_constraint_definition ::= ADD table_constraint_definition

--h3 11.20 drop_table_constraint_definition (p582)
--/h3

--p 
Destroy a constraint on a table.
--/p

drop_table_constraint_definition ::= DROP CONSTRAINT constraint_name drop_behavior

--h3 11.21 drop_table_statement (p585)
--/h3

--p 
Destroy a table.
--/p

drop_table_statement ::= DROP TABLE table_name drop_behavior

--h3 11.22 view_definition (p588)
--/h3

--p 
Define a viewed table.
--/p

view_definition ::=
		CREATE [ RECURSIVE ] VIEW table_name view_specification AS query_expression
		[ WITH [ levels_clause ] CHECK OPTION ]

view_specification ::= regular_view_specification | referenceable_view_specification

regular_view_specification ::= [ left_paren view_column_list right_paren ]

referenceable_view_specification ::= OF path-resolved_user-defined_type_name [ subview_clause ] [ view_element_list ]

subview_clause ::= UNDER table_name

view_element_list ::= left_paren view_element [ { comma view_element }... ] right_paren

view_element ::= self-referencing_column_specification | view_column_option

view_column_option ::= column_name WITH OPTIONS scope_clause

levels_clause ::= CASCADED | LOCAL

view_column_list ::= column_name_list

--h3 11.23 drop_view_statement (p598)
--/h3

--p 
Destroy a view.
--/p

drop_view_statement ::= DROP VIEW table_name drop_behavior

--h3 11.24 domain_definition (p601)
--/h3

--p 
Define a domain.
--/p

domain_definition ::=
		CREATE DOMAIN domain_name [ AS ] data_type
		[ default_clause ] [ domain_constraint... ] [ collate_clause ]

domain_constraint ::= [ constraint_name_definition ] check_constraint_definition [ constraint_characteristics ]

--h3 11.25 alter_domain_statement (p603)
--/h3

--p 
Change a domain and its definition.
--/p

alter_domain_statement ::= ALTER DOMAIN domain_name alter_domain_action

alter_domain_action ::=
		set_domain_default_clause
	|	drop_domain_default_clause
	|	add_domain_constraint_definition
	|	drop_domain_constraint_definition

--h3 11.26 set_domain_default_clause (p604)
--/h3

--p 
Set the default value in a domain.
--/p

set_domain_default_clause ::= SET default_clause

--h3 11.27 drop_domain_default_clause (p605)
--/h3

--p 
Remove the default clause of a domain.
--/p

drop_domain_default_clause ::= DROP DEFAULT

--h3 11.28 add_domain_constraint_definition (p606)
--/h3

--p 
Add a constraint to a domain.
--/p

add_domain_constraint_definition ::= ADD domain_constraint

--h3 11.29 drop_domain_constraint_definition (p607)
--/h3

--p 
Destroy a constraint on a domain.
--/p

drop_domain_constraint_definition ::= DROP CONSTRAINT constraint_name

--h3 11.30 drop_domain_statement (p608)
--/h3

--p 
Destroy a domain.
--/p

drop_domain_statement ::= DROP DOMAIN domain_name drop_behavior

--h3 11.31 character_set_definition (p610)
--/h3

--p 
Define a character set.
--/p

character_set_definition ::=
		CREATE CHARACTER SET character_set_name [ AS ] character_set_source [ collate_clause ]

character_set_source ::= GET character_set_specification

--h3 11.32 drop_character_set_statement (p612)
--/h3

--p 
Destroy a character set.
--/p

drop_character_set_statement ::= DROP CHARACTER SET character_set_name

--h3 11.33 collation_definition (p614)
--/h3

--p 
Define a collating sequence.
--/p

collation_definition ::=
		CREATE COLLATION collation_name FOR character_set_specification
		FROM existing_collation_name [ pad_characteristic ]

existing_collation_name ::= collation_name

pad_characteristic ::= NO PAD | PAD SPACE

--h3 11.34 drop_collation_statement (p616)
--/h3

--p 
Destroy a collating sequence.
--/p

drop_collation_statement ::= DROP COLLATION collation_name drop_behavior

--h3 11.35 transliteration_definition (p618)
--/h3

--p 
Define a character transliteration.
--/p

transliteration_definition ::=
		CREATE TRANSLATION transliteration_name FOR source_character_set_specification
		TO target_character_set_specification FROM transliteration_source

source_character_set_specification ::= character_set_specification

target_character_set_specification ::= character_set_specification

transliteration_source ::= existing_transliteration_name | transliteration_routine

existing_transliteration_name ::= transliteration_name

transliteration_routine ::= specific_routine_designator

--h3 11.36 drop_transliteration_statement (p621)
--/h3

--p 
Destroy a character transliteration.
--/p

drop_transliteration_statement ::= DROP TRANSLATION transliteration_name

--h3 11.37 assertion_definition (p623)
--/h3

--p 
Specify an integrity constraint.
--/p

assertion_definition ::=
		CREATE ASSERTION constraint_name CHECK left_paren search_condition right_paren [ constraint_characteristics ]

--h3 11.38 drop_assertion_statement (p625)
--/h3

--p 
Destroy an assertion.
--/p

drop_assertion_statement ::= DROP ASSERTION constraint_name

--h3 11.39 trigger_definition (p627)
--/h3

--p 
Define triggered SQL-statements.
--/p

trigger_definition ::=
		CREATE TRIGGER trigger_name trigger_action_time trigger_event
		ON table_name [ REFERENCING old_or_new_values_alias_list ]
		triggered_action

trigger_action_time ::= BEFORE | AFTER

trigger_event ::= INSERT | DELETE | UPDATE [ OF trigger_column_list ]

trigger_column_list ::= column_name_list

triggered_action ::=
		[ FOR EACH { ROW | STATEMENT } ]
		[ WHEN left_paren search_condition right_paren ]
		triggered_SQL_statement

triggered_SQL_statement ::=
		SQL_procedure_statement
	|	BEGIN ATOMIC { SQL_procedure_statement semicolon }...  END

old_or_new_values_alias_list ::= old_or_new_values_alias...

old_or_new_values_alias ::=
		OLD [ ROW ] [ AS ] old_values_correlation_name
	|	NEW [ ROW ] [ AS ] new_values_correlation_name
	|	OLD TABLE [ AS ] old_values_table_alias
	|	NEW TABLE [ AS ] new_values_table_alias

old_values_table_alias ::= identifier

new_values_table_alias ::= identifier

old_values_correlation_name ::= correlation_name

new_values_correlation_name ::= correlation_name

--h3 11.40 drop_trigger_statement (p631)
--/h3

--p 
Destroy a trigger.
--/p

drop_trigger_statement ::= DROP TRIGGER trigger_name

--h3 11.41 user-defined_type_definition (p632)
--/h3

--p 
Define a user-defined type.
--/p

user-defined_type_definition ::= CREATE TYPE user-defined_type_body

user-defined_type_body ::=
		schema-resolved_user-defined_type_name [ subtype_clause ]
		[ AS representation ] [ user-defined_type_option_list ] [ method_specification_list ]

user-defined_type_option_list ::= user-defined_type_option [ user-defined_type_option... ]

user-defined_type_option ::=
		instantiable_clause
	|	finality
	|	reference_type_specification
	|	ref_cast_option
	|	cast_option

subtype_clause ::=
		UNDER supertype_name

supertype_name ::=
		path-resolved_user-defined_type_name

representation ::= predefined_type | member_list

member_list ::= left_paren member [ { comma member }... ] right_paren

member ::= attribute_definition

instantiable_clause ::= INSTANTIABLE | NOT INSTANTIABLE

finality ::= FINAL | NOT FINAL

reference_type_specification ::=
		user-defined_representation
	|	derived_representation
	|	system-generated_representation

user-defined_representation ::= REF USING predefined_type

derived_representation ::= REF FROM list_of_attributes

system-generated_representation ::= REF IS SYSTEM GENERATED

ref_cast_option ::= [ cast_to_ref ] [ cast_to_type ]

cast_to_ref ::= CAST left_paren SOURCE AS REF right_paren WITH cast_to_ref_identifier

cast_to_ref_identifier ::= identifier

cast_to_type ::= CAST left_paren REF AS SOURCE right_paren WITH cast_to_type_identifier

cast_to_type_identifier ::= identifier

list_of_attributes ::= left_paren attribute_name [ { comma attribute_name }...] right_paren

cast_option ::= [ cast_to_distinct ] [ cast_to_source ]

cast_to_distinct ::=
		CAST left_paren SOURCE AS DISTINCT right_paren
		WITH cast_to_distinct_identifier

cast_to_distinct_identifier ::= identifier

cast_to_source ::=
		CAST left_paren DISTINCT AS SOURCE right_paren
		WITH cast_to_source_identifier

cast_to_source_identifier ::= identifier

method_specification_list ::= method_specification [ { comma method_specification }... ]

method_specification ::= original_method_specification | overriding_method_specification

original_method_specification ::=
		partial_method_specification [ SELF AS RESULT ] [ SELF AS LOCATOR ] [ method_characteristics ]

overriding_method_specification ::= OVERRIDING partial_method_specification

partial_method_specification ::=
		[ INSTANCE | STATIC | CONSTRUCTOR ] METHOD method_name SQL_parameter_declaration_list
		returns_clause [ SPECIFIC specific_method_name ]

specific_method_name ::= [ schema_name period ]qualified_identifier

method_characteristics ::= method_characteristic...

method_characteristic ::=
		language_clause
	|	parameter_style_clause
	|	deterministic_characteristic
	|	SQL-data_access_indication
	|	null-call_clause

--h3 11.42 attribute_definition (p648)
--/h3

--p 
Define an attribute of a structured type.
--/p

attribute_definition ::=
		attribute_name data_type [ reference_scope_check ] [ attribute_default ] [ collate_clause ]

attribute_default ::= default_clause

--h3 11.43 alter_type_statement (p650)
--/h3

--p 
Change the definition of a user-defined type.
--/p

alter_type_statement ::=
ALTER TYPE schema-resolved_user-defined_type_name alter_type_action

alter_type_action ::=
		add_attribute_definition
	|	drop_attribute_definition
	|	add_original_method_specification
	|	add_overriding_method_specification
	|	drop_method_specification

--h3 11.44 add_attribute_definition (p651)
--/h3

--p 
Add an attribute to a user-defined type.
--/p

add_attribute_definition ::= ADD ATTRIBUTE attribute_definition

--h3 11.45 drop_attribute_definition (p653)
--/h3

--p 
Destroy an attribute of a user-defined type.
--/p

drop_attribute_definition ::= DROP ATTRIBUTE attribute_name RESTRICT

--h3 11.46 add_original_method_specification (p655)
--/h3

--p 
Add an original method specification to a user-defined type.
--/p

add_original_method_specification ::= ADD original_method_specification

--h3 11.47 add_overriding_method_specification (p661)
--/h3

--p 
Add an overriding method specification to a user-defined type.
--/p

add_overriding_method_specification ::= ADD overriding_method_specification

--h3 11.48 drop_method_specification (p666)
--/h3

--p 
Remove a method specification from a user-defined type.
--/p

drop_method_specification ::= DROP specific_method_specification_designator RESTRICT

specific_method_specification_designator ::= [ INSTANCE | STATIC | CONSTRUCTOR ] METHOD method_name data_type_list

--h3 11.49 drop_data_type_statement (p670)
--/h3

--p 
Destroy a user-defined type.
--/p

drop_data_type_statement ::= DROP TYPE schema-resolved_user-defined_type_name drop_behavior

--h3 11.50 SQL-invoked_routine (p673)
--/h3

--p 
Define an SQL-invoked routine.
--/p

SQL-invoked_routine ::= schema_routine

schema_routine ::= schema_procedure | schema_function

schema_procedure ::= CREATE SQL-invoked_procedure

schema_function ::= CREATE SQL-invoked_function

SQL-invoked_procedure ::=
		PROCEDURE schema_qualified_routine_name SQL_parameter_declaration_list routine_characteristics routine_body

SQL-invoked_function ::=
		{ function_specification | method_specification_designator } routine_body

SQL_parameter_declaration_list ::=
		left_paren [ SQL_parameter_declaration [ { comma SQL_parameter_declaration }... ] ] right_paren

SQL_parameter_declaration ::= [ parameter_mode ] [ SQL_parameter_name ] parameter_type [ RESULT ]

parameter_mode ::= IN | OUT | INOUT

parameter_type ::= data_type [ locator_indication ]

locator_indication ::= AS LOCATOR

function_specification ::=
		FUNCTION schema_qualified_routine_name
		SQL_parameter_declaration_list returns_clause routine_characteristics [ dispatch_clause ]

method_specification_designator ::=
		SPECIFIC METHOD specific_method_name
	|	[ INSTANCE | STATIC | CONSTRUCTOR ] METHOD method_name SQL_parameter_declaration_list
		[ returns_clause ] FOR schema-resolved_user-defined_type_name

routine_characteristics ::= [ routine_characteristic... ]

routine_characteristic ::=
		language_clause
	|	parameter_style_clause
	|	SPECIFIC specific_name
	|	deterministic_characteristic
	|	SQL-data_access_indication
	|	null-call_clause
	|	dynamic_result_sets_characteristic
	|	savepoint_level_indication

savepoint_level_indication ::= NEW SAVEPOINT LEVEL | OLD SAVEPOINT LEVEL

dynamic_result_sets_characteristic ::= DYNAMIC RESULT SETS maximum_dynamic_result_sets

parameter_style_clause ::= PARAMETER STYLE parameter_style

dispatch_clause ::= STATIC DISPATCH

returns_clause ::= RETURNS returns_type

returns_type ::=
		returns_data_type [ result_cast ]
	|	returns_table_type

returns_table_type ::= TABLE table_function_column_list

table_function_column_list ::=
		left_paren
		table_function_column_list_element [ { comma table_function_column_list_element }... ]
		right_paren

table_function_column_list_element ::= column_name data_type

result_cast ::= CAST FROM result_cast_from_type

result_cast_from_type ::= data_type [ locator_indication ]

returns_data_type ::= data_type [ locator_indication ]

routine_body ::=
		SQL_routine_spec
	|	external_body_reference

SQL_routine_spec ::= [ rights_clause ] SQL_routine_body

rights_clause ::= SQL SECURITY INVOKER | SQL SECURITY DEFINER

SQL_routine_body ::= SQL_procedure_statement

external_body_reference ::=
		EXTERNAL [ NAME external_routine_name ] [ parameter_style_clause ]
		[ transform_group_specification ] [ external_security_clause ]

external_security_clause ::=
		EXTERNAL SECURITY DEFINER
	|	EXTERNAL SECURITY INVOKER
	|	EXTERNAL SECURITY IMPLEMENTATION DEFINED

parameter_style ::= SQL | GENERAL

deterministic_characteristic ::= DETERMINISTIC | NOT DETERMINISTIC

SQL-data_access_indication ::=
		NO SQL
	|	CONTAINS SQL
	|	READS SQL DATA
	|	MODIFIES SQL DATA

null-call_clause ::=
		RETURNS NULL ON NULL INPUT
	|	CALLED ON NULL INPUT

maximum_dynamic_result_sets ::= unsigned_integer

transform_group_specification ::= TRANSFORM GROUP { single_group_specification | multiple_group_specification }

single_group_specification ::= group_name

multiple_group_specification ::= group_specification [ { comma group_specification }... ]

group_specification ::= group_name FOR TYPE path-resolved_user-defined_type_name

--h3 11.51 alter_routine_statement (p698)
--/h3

--p 
Alter a characteristic of an SQL-invoked routine.
--/p

alter_routine_statement ::= ALTER specific_routine_designator alter_routine_characteristics alter_routine_behavior

alter_routine_characteristics ::= alter_routine_characteristic...

alter_routine_characteristic ::=
		language_clause
	|	parameter_style_clause
	|	SQL-data_access_indication
	|	null-call_clause
	|	dynamic_result_sets_characteristic
	|	NAME external_routine_name

alter_routine_behavior ::= RESTRICT

--h3 11.52 drop_routine_statement (p701)
--/h3

--p 
Destroy an SQL-invoked routine.
--/p

drop_routine_statement ::= DROP specific_routine_designator drop_behavior

--h3 11.53 user-defined_cast_definition (p703)
--/h3

--p 
Define a user-defined cast.
--/p

user-defined_cast_definition ::=
		CREATE CAST left_paren source_data_type AS target_data_type right_paren
		WITH cast_function [ AS ASSIGNMENT ]

cast_function ::= specific_routine_designator

source_data_type ::= data_type

target_data_type ::= data_type

--h3 11.54 drop_user-defined_cast_statement (p705)
--/h3

--p 
Destroy a user-defined cast.
--/p

drop_user-defined_cast_statement ::=
		DROP CAST left_paren source_data_type AS target_data_type right_paren drop_behavior

--h3 11.55 user-defined_ordering_definition (p707)
--/h3

--p 
Define a user-defined ordering for a user-defined type.
--/p

user-defined_ordering_definition ::=
		CREATE ORDERING FOR schema-resolved_user-defined_type_name ordering_form

ordering_form ::= equals_ordering_form | full_ordering_form

equals_ordering_form ::= EQUALS ONLY BY ordering_category

full_ordering_form ::= ORDER FULL BY ordering_category

ordering_category ::= relative_category | map_category | state_category

relative_category ::= RELATIVE WITH relative_function_specification

map_category ::= MAP WITH map_function_specification

state_category ::= STATE [ specific_name ]

relative_function_specification ::= specific_routine_designator

map_function_specification ::= specific_routine_designator

--h3 11.56 drop_user-defined_ordering_statement (p710)
--/h3

--p 
Destroy a user-defined ordering method.
--/p

drop_user-defined_ordering_statement ::=
		DROP ORDERING FOR schema-resolved_user-defined_type_name drop_behavior

--h3 11.57 transform_definition (p712)
--/h3

--p 
Define one or more transform functions for a user-defined type.
--/p

transform_definition ::= CREATE { TRANSFORM | TRANSFORMS } FOR schema-resolved_user-defined_type_name transform_group...

transform_group ::= group_name left_paren transform_element_list right_paren

group_name ::= identifier

transform_element_list ::= transform_element [ comma transform_element ]

transform_element ::= to_sql | from_sql

to_sql ::= TO SQL WITH to_sql_function

from_sql ::= FROM SQL WITH from_sql_function

to_sql_function ::= specific_routine_designator

from_sql_function ::= specific_routine_designator

--h3 11.58 alter_transform_statement (p715)
--/h3

--p 
Change the definition of one or more transform groups.
--/p

alter_transform_statement ::=
		ALTER {TRANSFORM | TRANSFORMS} FOR schema-resolved_user-defined_type_name alter_group...

alter_group ::= group_name left_paren alter_transform_action_list right_paren

alter_transform_action_list ::= alter_transform_action [ { comma alter_transform_action }... ]

alter_transform_action ::= add_transform_element_list | drop_transform_element_list

--h3 11.59 add_transform_element_list (p717)
--/h3

--p 
Add a transform element (to_sql and/or from_sql) to an existing transform group.
--/p

add_transform_element_list ::= ADD left_paren transform_element_list right_paren

--h3 11.60 drop_transform_element_list (p719)
--/h3

--p 
Remove a transform element (to_sql and/or from_sql) from a transform group.
--/p

drop_transform_element_list ::= DROP left_paren transform_kind [ comma transform_kind ] drop_behavior right_paren

transform_kind ::= TO SQL | FROM SQL

--h3 11.61 drop_transform_statement (p721)
--/h3

--p 
Remove one or more transform functions associated with a transform.
--/p

drop_transform_statement ::=
		DROP { TRANSFORM | TRANSFORMS } transforms_to_be_dropped FOR schema-resolved_user-defined_type_name drop_behavior

transforms_to_be_dropped ::= ALL | transform_group_element

transform_group_element ::= group_name

--h3 11.62 sequence_generator_definition (p724)
--/h3

--p 
Define an external sequence generator.
--/p

sequence_generator_definition ::= CREATE SEQUENCE sequence_generator_name [ sequence_generator_options ]

sequence_generator_options ::= sequence_generator_option ...

sequence_generator_option ::= sequence_generator_data_type_option | common_sequence_generator_options

common_sequence_generator_options ::= common_sequence_generator_option ...

common_sequence_generator_option ::= sequence_generator_start_with_option | basic_sequence_generator_option

basic_sequence_generator_option ::=
		sequence_generator_increment_by_option
	|	sequence_generator_maxvalue_option
	|	sequence_generator_minvalue_option
	|	sequence_generator_cycle_option

sequence_generator_data_type_option ::= AS data_type

sequence_generator_start_with_option ::= START WITH sequence_generator_start_value

sequence_generator_start_value ::= signed_numeric_literal

sequence_generator_increment_by_option :: = INCREMENT BY sequence_generator_increment

sequence_generator_increment ::= signed_numeric_literal

sequence_generator_maxvalue_option ::=
MAXVALUE sequence_generator_max_value
	|	NO MAXVALUE

sequence_generator_max_value ::= signed_numeric_literal

sequence_generator_minvalue_option ::= MINVALUE sequence_generator_min_value | NO MINVALUE

sequence_generator_min_value ::= signed_numeric_literal

sequence_generator_cycle_option ::= CYCLE | NO CYCLE

--h3 11.63 alter_sequence_generator_statement (p726)
--/h3

--p 
Change the definition of an external sequence generator.
--/p

alter_sequence_generator_statement ::=
		ALTER SEQUENCE sequence_generator_name alter_sequence_generator_options

alter_sequence_generator_options ::= alter_sequence_generator_option...

alter_sequence_generator_option ::=
		alter_sequence_generator_restart_option
	|	basic_sequence_generator_option

alter_sequence_generator_restart_option ::= RESTART WITH sequence_generator_restart_value

sequence_generator_restart_value ::= signed_numeric_literal

--h3 11.64 drop_sequence_generator_statement (p727)
--/h3

--p 
Destroy an external sequence generator.
--/p

drop_sequence_generator_statement ::= DROP SEQUENCE sequence_generator_name drop_behavior

--hr
--h2 12 Access control
--/h2

--h3 12.1 grant_statement (p729)
--/h3

--p 
Define privileges and role authorizations.
--/p

grant_statement ::= grant_privilege_statement | grant_role_statement

--h3 12.2 grant_privilege_statement (p734)
--/h3

--p 
Define privileges.
--/p

grant_privilege_statement ::=
		GRANT privileges TO grantee [ { comma grantee }... ]
		[ WITH HIERARCHY OPTION ] [ WITH GRANT OPTION ] [ GRANTED BY grantor ]

--h3 12.3 privileges (p737)
--/h3

--p 
Specify privileges.
--/p

privileges ::= object_privileges ON object_name

object_name ::=
		[ TABLE ] table_name
	|	DOMAIN domain_name
	|	COLLATION collation_name
	|	CHARACTER SET character_set_name
	|	TRANSLATION transliteration_name
	|	TYPE schema-resolved_user-defined_type_name
	|	SEQUENCE sequence_generator_name
	|	specific_routine_designator

object_privileges ::=
		ALL PRIVILEGES
	|	action [ { comma action }... ]

action ::=
		SELECT
	|	SELECT left_paren privilege_column_list right_paren
	|	SELECT left_paren privilege_method_list right_paren
	|	DELETE
	|	INSERT [ left_paren privilege_column_list right_paren ]
	|	UPDATE [ left_paren privilege_column_list right_paren ]
	|	REFERENCES [ left_paren privilege_column_list right_paren ]
	|	USAGE
	|	TRIGGER
	|	UNDER
	|	EXECUTE

privilege_method_list ::= specific_routine_designator [ { comma specific_routine_designator }... ]

privilege_column_list ::= column_name_list

grantee ::= PUBLIC | authorization_identifier

grantor ::= CURRENT_USER | CURRENT_ROLE

--h3 12.4 role_definition (p741)
--/h3

--p 
Define a role.
--/p

role_definition ::= CREATE ROLE role_name [ WITH ADMIN grantor ]

--h3 12.5 grant_role_statement (p742)
--/h3

--p 
Define role authorizations.
--/p

grant_role_statement ::=
		GRANT role_granted [ { comma role_granted }... ]
		TO grantee [ { comma grantee }... ] [ WITH ADMIN OPTION ] [ GRANTED BY grantor ]

role_granted ::= role_name

--h3 12.6 drop_role_statement (p744)
--/h3

--p 
Destroy a role.
--/p

drop_role_statement ::= DROP ROLE role_name

--h3 12.7 revoke_statement (p745)
--/h3

--p 
Destroy privileges and role authorizations.
--/p

revoke_statement ::=
		revoke_privilege_statement
	|	revoke_role_statement

revoke_privilege_statement ::=
		REVOKE [ revoke_option_extension ] privileges FROM grantee [ { comma grantee }... ]
		[ GRANTED BY grantor ] drop_behavior

revoke_option_extension ::= GRANT OPTION FOR | HIERARCHY OPTION FOR

revoke_role_statement ::=
		REVOKE [ ADMIN OPTION FOR ] role_revoked [ { comma role_revoked }... ]
		FROM grantee [ { comma grantee }... ] [ GRANTED BY grantor ] drop_behavior

role_revoked ::= role_name

--hr
--h2 13 SQL-client modules
--/h2

--h3 13.1 SQL-client_module_definition (p763)
--/h3

--p 
Define an SQL-client module.
--/p

SQL-client_module_definition ::=
		module_name_clause language_clause module_authorization_clause
		[ module_path_specification ]
		[ module_transform_group_specification ]
		[ module_collation ]
		[ temporary_table_declaration... ]
		module_contents...

module_authorization_clause ::=
		SCHEMA schema_name
	|	AUTHORIZATION module_authorization_identifier [ FOR STATIC { ONLY | AND DYNAMIC } ]
	|	SCHEMA schema_name AUTHORIZATION module_authorization_identifier [ FOR STATIC { ONLY | AND DYNAMIC } ]

module_authorization_identifier ::= authorization_identifier

module_path_specification ::= path_specification

module_transform_group_specification ::= transform_group_specification

module_collations ::= module_collation_specification...

module_collation_specification ::= COLLATION collation_name [ FOR character_set_specification_list ]

character_set_specification_list ::= character_set_specification [ {comma character_set_specification }... ]

module_contents ::=
		declare_cursor
	|	dynamic_declare_cursor
	|	externally-invoked_procedure

--h3 13.2 module_name_clause (p768)
--/h3

--p 
Name an SQL-client module.
--/p

module_name_clause ::=
		MODULE [ SQL-client_module_name ] [ module_character_set_specification ]

module_character_set_specification ::= NAMES ARE character_set_specification

--h3 13.3 externally-invoked_procedure (p769)
--/h3

--p 
Define an externally-invoked procedure.
--/p

externally-invoked_procedure ::=
		PROCEDURE procedure_name host_parameter_declaration_list semicolon
		SQL_procedure_statement semicolon

host_parameter_declaration_list ::=
		left_paren host_parameter_declaration [ { comma host_parameter_declaration }... ] right_paren

host_parameter_declaration ::=
		host_parameter_name host_parameter_data_type
	|	status_parameter

host_parameter_data_type ::= data_type [ locator_indication ]

status_parameter ::= SQLSTATE

--h3 13.4 Calls to an externally-invoked_procedure (p772)
--/h3

--h3 13.5 SQL_procedure_statement (p788)
--/h3

--p 
Define all of the SQL-statements that are SQL_procedure_statements.
--/p

SQL_procedure_statement ::= SQL_executable_statement

SQL_executable_statement ::=
		SQL_schema_statement
	|	SQL_data_statement
	|	SQL_control_statement
	|	SQL_transaction_statement
	|	SQL_connection_statement
	|	SQL_session_statement
	|	SQL_diagnostics_statement
	|	SQL_dynamic_statement

SQL_schema_statement ::=
		SQL_schema_definition_statement
	|	SQL_schema_manipulation_statement

SQL_schema_definition_statement ::=
		schema_definition
	|	table_definition
	|	view_definition
	|	SQL-invoked_routine
	|	grant_statement
	|	role_definition
	|	domain_definition
	|	character_set_definition
	|	collation_definition
	|	transliteration_definition
	|	assertion_definition
	|	trigger_definition
	|	user-defined_type_definition
	|	user-defined_cast_definition
	|	user-defined_ordering_definition
	|	transform_definition
	|	sequence_generator_definition

SQL_schema_manipulation_statement ::=
		drop_schema_statement
	|	alter_table_statement
	|	drop_table_statement
	|	drop_view_statement
	|	alter_routine_statement
	|	drop_routine_statement
	|	drop_user-defined_cast_statement
	|	revoke_statement
	|	drop_role_statement
	|	alter_domain_statement
	|	drop_domain_statement
	|	drop_character_set_statement
	|	drop_collation_statement
	|	drop_transliteration_statement
	|	drop_assertion_statement
	|	drop_trigger_statement
	|	alter_type_statement
	|	drop_data_type_statement
	|	drop_user-defined_ordering_statement
	|	alter_transform_statement
	|	drop_transform_statement | alter_sequence_generator_statement
	|	drop_sequence_generator_statement

SQL_data_statement ::=
		open_statement
	|	fetch_statement
	|	close_statement
	|	select_statement:_single_row
	|	free_locator_statement
	|	hold_locator_statement
	|	SQL_data_change_statement

SQL_data_change_statement ::=
		delete_statement:_positioned
	|	delete_statement:_searched
	|	insert_statement
	|	update_statement:_positioned
	|	update_statement:_searched
	|	merge_statement

SQL_control_statement ::=
		call_statement
	|	return_statement

SQL_transaction_statement ::=
		start_transaction_statement
	|	set_transaction_statement
	|	set_constraints_mode_statement
	|	savepoint_statement
	|	release_savepoint_statement
	|	commit_statement
	|	rollback_statement

SQL_connection_statement ::=
		connect_statement
	|	set_connection_statement
	|	disconnect_statement

SQL_session_statement ::=
		set_session_user_identifier_statement
	|	set_role_statement
	|	set_local_time_zone_statement
	|	set_session_characteristics_statement
	|	set_catalog_statement
	|	set_schema_statement
	|	set_names_statement
	|	set_path_statement
	|	set_transform_group_statement
	|	set_session_collation_statement

SQL_diagnostics_statement ::= get_diagnostics_statement

SQL_dynamic_statement ::=
		system_descriptor_statement
	|	prepare_statement
	|	deallocate_prepared_statement
	|	describe_statement
	|	execute_statement
	|	execute_immediate_statement
	|	SQL_dynamic_data_statement

SQL_dynamic_data_statement ::=
		allocate_cursor_statement
	|	dynamic_open_statement
	|	dynamic_fetch_statement
	|	dynamic_close_statement
	|	dynamic_delete_statement:_positioned
	|	dynamic_update_statement:_positioned

system_descriptor_statement ::=
		allocate_descriptor_statement
	|	deallocate_descriptor_statement
	|	set_descriptor_statement
	|	get_descriptor_statement

--h3 13.6 Data type correspondences (p796)
--/h3

Table 16 -- Data type correspondences for C

--## table_border=1
--## trth SQL Data Type /thth C Data Type /th/tr

--## trtd SQLSTATE /tdtd char, with length 6 /td/tr
--## trtd CHARACTER (L)sup3/sup /tdtd char, with length (L+1)*ksup1/sup /td/tr
--## trtd CHARACTER VARYING (L)sup3/sup /tdtd char, with length (L+1)*ksup1/sup /td/tr
--## trtd CHARACTER LARGE OBJECT(L) /tdtd
--## pre
--## struct {
--## long hvnsup3/sup_reserved
--## unsigned long hvnsup2/sup_length
--## charsup3/sup hvnsup2/sup_data[L];
--## } hvnsup2/sup
--## /pre /td/tr
--## trtd BINARY LARGE OBJECT(L) /tdtd
--## pre struct {
--## long hvnsup2/sup_reserved
--## unsigned long hvnsup2/sup_length
--## char hvnsup2/sup_data[L];
--## } hvnsup2/sup
--## /pre /td/tr
--## trtd NUMERIC(P,S) /tdtd None /td/tr
--## trtd DECIMAL(P,S) /tdtd None /td/tr
--## trtd SMALLINT /tdtd pointer to short /td/tr
--## trtd INTEGER /tdtd pointer to long /td/tr
--## trtd BIGINT /tdtd pointer to long long /td/tr
--## trtd FLOAT(P) /tdtd None /td/tr
--## trtd REAL /tdtd pointer to float /td/tr
--## trtd DOUBLE PRECISION /tdtd pointer to double /td/tr
--## trtd BOOLEAN /tdtd pointer to long /td/tr
--## trtd DATE /tdtd None /td/tr
--## trtd TIME(T) /tdtd None /td/tr
--## trtd TIMESTAMP(T) /tdtd None /td/tr
--## trtd INTERVAL(Q) /tdtd None /td/tr
--## trtd user-defined type /tdtd None /td/tr
--## trtd REF /tdtd char, with length N /td/tr
--## trtd ROW /tdtd None /td/tr
--## trtd ARRAY /tdtd None /td/tr
--## trtd MULTISET /tdtd None /td/tr
--## /table

--p
--## sup1/sup For character set UTF16, as well as other
implementation-defined character sets in which a code unit occupies two
octets, k is the length in units of C unsigned short of the character
encoded using the greatest number of such units in the character set;
for character set UTF32, as well as other implementation-defined
character sets in which a code unit occupies four octets, k is four; for
other character sets, k is the length in units of C char of the
character encoded using the greatest number of such units in the
character set.
--br
--## sup2/sup hvn is the name of the host variable defined to correspond
to the SQL data type
--br
--## sup3/sup For character set UTF16, as well as other
implementation-defined character sets in which a code unit occupies two
octets, char or unsigned char should be replaced with unsigned short;
for character set UTF32, as well as other implementation-defined
character sets in which a code unit occupies four octets, char or
unsigned char should be replaced with unsigned int.  Otherwise, char or
unsigned char should be used.
--/p

--hr
--h2 14 Data manipulation
--/h2

--h3 14.1 declare_cursor (p807)
--/h3

--p 
Define a cursor.
--/p

declare_cursor ::=
		DECLARE cursor_name [ cursor_sensitivity ] [ cursor_scrollability ] CURSOR
		[ cursor_holdability ] [ cursor_returnability ] FOR cursor_specification

cursor_sensitivity ::= SENSITIVE | INSENSITIVE | ASENSITIVE

cursor_scrollability ::= SCROLL | NO SCROLL

cursor_holdability ::= WITH HOLD | WITHOUT HOLD

cursor_returnability ::= WITH RETURN | WITHOUT RETURN

cursor_specification ::= query_expression [ order_by_clause ] [ updatability_clause ] 

updatability_clause ::= FOR { READ ONLY | UPDATE [ OF column_name_list ] }

order_by_clause ::= ORDER BY sort_specification_list

--h3 14.2 open_statement (p813)
--/h3

--p 
Open a cursor.
--/p

open_statement ::= OPEN cursor_name

--h3 14.3 fetch_statement (p815)
--/h3

--p 
Position a cursor on a specified row of a table and retrieve values from that row.
--/p

fetch_statement ::=
		FETCH [ [ fetch_orientation ] FROM ] cursor_name INTO fetch_target_list

fetch_orientation ::=
		NEXT
	|	PRIOR
	|	FIRST
	|	LAST
	|	{ ABSOLUTE | RELATIVE } simple_value_specification

fetch_target_list ::= target_specification [ { comma target_specification }... ]

--h3 14.4 close_statement (p820)
--/h3

Close a cursor.

close_statement ::= CLOSE cursor_name

--h3 14.5 select_statement:_single_row (p822)
--/h3

--p 
Retrieve values from a specified row of a table.
--/p

select_statement:_single_row ::=
		SELECT [ set_quantifier ] select_list INTO select_target_list table_expression

select_target_list ::= target_specification [ { comma target_specification }... ]

--h3 14.6 delete_statement:_positioned (p826)
--/h3

--p 
Delete a row of a table.
--/p

delete_statement:_positioned ::= DELETE FROM target_table WHERE CURRENT OF cursor_name

target_table ::=
		table_name
	|	ONLY left_paren table_name right_paren

--h3 14.7 delete_statement:_searched (p829)
--/h3

--p 
Delete rows of a table.
--/p

delete_statement:_searched ::= DELETE FROM target_table [ WHERE search_condition ]

--h3 14.8 insert_statement (p832)
--/h3

--p 
Create new rows in a table.
--/p

insert_statement ::= INSERT INTO insertion_target insert_columns_and_source

insertion_target ::= table_name

insert_columns_and_source ::=
		from_subquery
	|	from_constructor
	|	from_default

from_subquery ::= [ left_paren insert_column_list right_paren ] [ override_clause ] query_expression

from_constructor ::=
		[ left_paren insert_column_list right_paren ] [ override_clause ] contextually_typed_table_value_constructor

override_clause ::= OVERRIDING USER VALUE | OVERRIDING SYSTEM VALUE

from_default ::= DEFAULT VALUES

insert_column_list ::= column_name_list

--h3 14.9 merge_statement (p837)
--/h3

--p 
Conditionally update rows of a table, or insert new rows into a table, or both.
--/p

merge_statement ::=
		MERGE INTO target_table [ [ AS ] merge_correlation_name ]
		USING table_reference ON search_condition merge_operation_specification

merge_correlation_name ::= correlation_name

merge_operation_specification ::= merge_when_clause...

merge_when_clause ::= merge_when_matched_clause | merge_when_not_matched_clause

merge_when_matched_clause ::= WHEN MATCHED THEN merge_update_specification

merge_when_not_matched_clause ::= WHEN NOT MATCHED THEN merge_insert_specification

merge_update_specification ::= UPDATE SET set_clause_list

merge_insert_specification ::=
		INSERT [ left_paren insert_column_list right_paren ]
		[ override_clause ] VALUES merge_insert_value_list

merge_insert_value_list ::=
		left_paren merge_insert_value_element [ { comma merge_insert_value_element }... ] right_paren

merge_insert_value_element ::= value_expression | contextually_typed_value_specification

--h3 14.10 update_statement:_positioned (p844)
--/h3

--p 
Update a row of a table.
--/p

update_statement:_positioned ::= UPDATE target_table SET set_clause_list WHERE CURRENT OF cursor_name

--h3 14.11 update_statement:_searched (p847)
--/h3

--p 
Update rows of a table.
--/p

update_statement:_searched ::= UPDATE target_table SET set_clause_list [ WHERE search_condition ]

--h3 14.12 set_clause_list (p851)
--/h3

--p 
Specify a list of updates.
--/p

set_clause_list ::= set_clause [ { comma set_clause }... ]

set_clause ::=
		multiple_column_assignment
	|	set_target equals_operator update_source

set_target ::= update_target | mutated_set_clause

multiple_column_assignment ::= set_target_list equals_operator assigned_row

set_target_list ::= left_paren set_target [ { comma set_target }... ] right_paren

assigned_row ::= contextually_typed_row_value_expression

update_target ::=
		object_column
	|	object_column left_bracket_or_trigraph simple_value_specification right_bracket_or_trigraph

object_column ::= column_name

mutated_set_clause ::= mutated_target period method_name

mutated_target ::= object_column | mutated_set_clause

update_source ::= value_expression | contextually_typed_value_specification

--h3 14.13 temporary_table_declaration (p856)
--/h3

--p 
Declare a declared local temporary table.
--/p

temporary_table_declaration ::=
		DECLARE LOCAL TEMPORARY TABLE table_name table_element_list
		[ ON COMMIT table_commit_action ROWS ]

--h3 14.14 free_locator_statement (p858)
--/h3

--p 
Remove the association between a locator variable and the value that is represented by that locator.
--/p

free_locator_statement ::= FREE LOCATOR locator_reference [ { comma locator_reference }... ]

locator_reference ::= host_parameter_name | embedded_variable_name

--h3 14.15 hold_locator_statement (p859)
--/h3

--p 
Mark a locator variable as being holdable.
--/p

hold_locator_statement ::= HOLD LOCATOR locator_reference [ { comma locator_reference }... ]

--h3 14.16 Effect of deleting rows from base tables (p860)
--/h3

--h3 14.17 Effect of deleting some rows from a derived table (p862)
--/h3

--h3 14.18 Effect of deleting some rows from a viewed table (p864)
--/h3

--h3 14.19 Effect of inserting tables into base tables (p865)
--/h3

--h3 14.20 Effect of inserting a table into a derived table (p867)
--/h3

--h3 14.21 Effect of inserting a table into a viewed table (p869)
--/h3

--h3 14.22 Effect of replacing rows in base tables (p871)
--/h3

--h3 14.23 Effect of replacing some rows in a derived table (p874)
--/h3

--h3 14.24 Effect of replacing some rows in a viewed table (p877)
--/h3

--h3 14.25 Execution of BEFORE triggers (p879)
--/h3

--h3 14.26 Execution of AFTER triggers (p880)
--/h3

--h3 14.27 Execution of triggers (p881)
--/h3

--hr
--h2 15 Control statements
--/h2

--h3 15.1 call_statement (p883)
--/h3

--p 
Invoke an SQL-invoked routine.
--/p

call_statement ::= CALL routine_invocation

--h3 15.2 return_statement (p884)
--/h3

--p 
Return a value from an SQL function.
--/p

return_statement ::= RETURN return_value

return_value ::= value_expression | NULL

--hr
--h2 16 Transaction management
--/h2

--h3 16.1 start_transaction_statement (p885)
--/h3

--p 
Start an SQL-transaction and set its characteristics.
--/p

start_transaction_statement ::= START TRANSACTION [ transaction_mode [ { comma transaction_mode }...] ]

transaction_mode ::= isolation_level | transaction_access_mode | diagnostics_size

transaction_access_mode ::= READ ONLY | READ WRITE

isolation_level ::= ISOLATION LEVEL level_of_isolation

level_of_isolation ::= READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE

diagnostics_size ::= DIAGNOSTICS SIZE number_of_conditions

number_of_conditions ::= simple_value_specification

--h3 16.2 set_transaction_statement (p888)
--/h3

--p 
Set the characteristics of the next SQL-transaction for the SQL-agent.
NOTE 402 - This statement has no effect on any SQL-transactions subsequent to the next SQL-transaction.
--/p

set_transaction_statement ::= SET [ LOCAL ] transaction_characteristics

transaction_characteristics ::= TRANSACTION transaction_mode [ { comma transaction_mode }... ]

--h3 16.3 set_constraints_mode_statement (p890)
--/h3

--p 
If an SQL-transaction is currently active, then set the constraint mode for that SQL-transaction in
the current SQL-session. If no SQL-transaction is currently active, then set the constraint mode for
the next SQL-transaction in the current SQL-session for the SQL-agent.
NOTE 404 � This statement has no effect on any SQL-transactions subsequent to this SQL-transaction.
--/p

set_constraints_mode_statement ::= SET CONSTRAINTS constraint_name_list { DEFERRED | IMMEDIATE }

constraint_name_list ::= ALL | constraint_name [ { comma constraint_name }... ]

--h3 16.4 savepoint_statement (p892)
--/h3

--p 
Establish a savepoint.
--/p

savepoint_statement ::= SAVEPOINT savepoint_specifier

savepoint_specifier ::= savepoint_name

--h3 16.5 release_savepoint_statement (p893)
--/h3

--p 
Destroy a savepoint.
--/p

release_savepoint_statement ::= RELEASE SAVEPOINT savepoint_specifier

--h3 16.6 commit_statement (p894)
--/h3

--p 
Terminate the current SQL-transaction with commit.
--/p

commit_statement ::= COMMIT [ WORK ] [ AND [ NO ] CHAIN ]

--h3 16.7 rollback_statement (p896)
--/h3

--p 
Terminate the current SQL-transaction with rollback, or rollback all actions affecting SQL-data
and/or schemas since the establishment of a savepoint.
--/p

rollback_statement ::= ROLLBACK [ WORK ] [ AND [ NO ] CHAIN ] [ savepoint_clause ]

savepoint_clause ::= TO SAVEPOINT savepoint_specifier

--hr
--h2 17 Connection management
--/h2

--h3 17.1 connect_statement (p899)
--/h3

--p 
Establish an SQL-session.
--/p

connect_statement ::= CONNECT TO connection_target

connection_target ::=
		SQL-server_name [ AS connection_name ] [ USER connection_user_name ]
	|	DEFAULT

--h3 17.2 set_connection_statement (p902)
--/h3

--p 
Select an SQL-connection from the available SQL-connections.
--/p

set_connection_statement ::= SET CONNECTION connection_object

connection_object ::= DEFAULT | connection_name 

--h3 17.3 disconnect_statement (p904)
--/h3

--p 
Terminate an SQL-connection.
--/p

disconnect_statement ::= DISCONNECT disconnect_object

disconnect_object ::= connection_object | ALL |	CURRENT

--hr
--h2 18 Session management
--/h2

--h3 18.1 set_session_characteristics_statement (p907)
--/h3

--p 
Set one or more characteristics for the current SQL-session.
--/p

set_session_characteristics_statement ::= SET SESSION CHARACTERISTICS AS session_characteristic_list

session_characteristic_list ::= session_characteristic [ { comma session_characteristic }... ]

session_characteristic ::= transaction_characteristics

--h3 18.2 set_session_user_identifier_statement (p908)
--/h3

--p 
Set the SQL-session user identifier and the current user identifier of the current SQL-session
context.
--/p

set_session_user_identifier_statement ::= SET SESSION AUTHORIZATION value_specification

--h3 18.3 set_role_statement (p909)
--/h3

--p 
Set the current role name for the current SQL-session context.
--/p

set_role_statement ::= SET ROLE role_specification

role_specification ::= value_specification | NONE

--h3 18.4 set_local_time_zone_statement (p911)
--/h3

--p 
Set the default local time zone displacement for the current SQL-session.
--/p

set_local_time_zone_statement ::= SET TIME ZONE set_time_zone_value

set_time_zone_value ::= interval_value_expression | LOCAL

--h3 18.5 set_catalog_statement (p912)
--/h3

--p 
Set the default catalog name for unqualified schema_names in preparable_statements that
are prepared in the current SQL-session by an execute_immediate_statement or a <prepare
statement> and in direct_SQL_statements that are invoked directly.
--/p

set_catalog_statement ::= SET catalog_name_characteristic

catalog_name_characteristic ::= CATALOG value_specification

--h3 18.6 set_schema_statement (p913)
--/h3

--p 
Set the default schema name for unqualified schema_qualified_names in preparable_statements
that are prepared in the current SQL-session by an execute_immediate_statement or a <prepare
statement> and in direct_SQL_statements that are invoked directly.
--/p

set_schema_statement ::= SET schema_name_characteristic

schema_name_characteristic ::= SCHEMA value_specification

--h3 18.7 set_names_statement (p915)
--/h3

--p 
Set the default character set name for character_string_literals in preparable_statements that
are prepared in the current SQL-session by an execute_immediate_statement or a <prepare
statement> and in direct_SQL_statements that are invoked directly.
--/p

set_names_statement ::= SET character_set_name_characteristic

character_set_name_characteristic ::= NAMES value_specification

--h3 18.8 set_path_statement (p916)
--/h3

--p 
Set the SQL-path used to determine the subject routine of routine_invocations with unqualified
routine_names in preparable_statements that are prepared in the current SQL-session by
an execute_immediate_statement or a prepare_statement and in direct_SQL_statements,
respectively, that are invoked directly. The SQL-path remains the current SQL-path of the SQLsession
until another SQL-path is successfully set.
--/p

set_path_statement ::= SET SQL-path_characteristic

SQL-path_characteristic ::= PATH value_specification

--h3 18.9 set_transform_group_statement (p917)
--/h3

--p 
Set the group name that identifies the group of transform functions for
mapping values of userdefined types to predefined data types.
--/p

set_transform_group_statement ::= SET transform_group_characteristic

transform_group_characteristic ::=
		DEFAULT TRANSFORM GROUP value_specification
	|	TRANSFORM GROUP FOR TYPE path-resolved_user-defined_type_name value_specification

--h3 18.10 set_session_collation_statement (p918)
--/h3

--p 
Set the SQL-session collation of the SQL-session for one or more
character sets.  An SQL-session collation remains effective until
another SQL-session collation for the same character set is successfully
set.
--/p

set_session_collation_statement ::=
		SET COLLATION collation_specification [ FOR character_set_specification_list ]
	|	SET NO COLLATION [ FOR character_set_specification_list ]

character_set_specification_list ::= character_set_specification [ , character_set_specification... ]

collation_specification ::= value_specification

--hr
--h2 19 Dynamic SQL

--h3 19.1 Description of SQL descriptor areas (p921)
--/h3

--h3 19.2 allocate_descriptor_statement (p931)
--/h3

--p 
Allocate an SQL descriptor area.
--/p

allocate_descriptor_statement ::= ALLOCATE [ SQL ] DESCRIPTOR descriptor_name [ WITH MAX occurrences ]

occurrences ::= simple_value_specification

--h3 19.3 deallocate_descriptor_statement (p933)
--/h3

--p 
Deallocate an SQL descriptor area.
--/p

deallocate_descriptor_statement ::= DEALLOCATE [ SQL ] DESCRIPTOR descriptor_name

--h3 19.4 get_descriptor_statement (p934)
--/h3

--p 
Get information from an SQL descriptor area.
--/p

get_descriptor_statement ::= GET [ SQL ] DESCRIPTOR descriptor_name get_descriptor_information

get_descriptor_information ::=
		get_header_information [ { comma get_header_information }... ]
	|	VALUE item_number get_item_information [ { comma get_item_information }... ]

get_header_information ::= simple_target_specification_1 equals_operator header_item_name

header_item_name ::= COUNT | KEY_TYPE | DYNAMIC_FUNCTION | DYNAMIC_FUNCTION_CODE | TOP_LEVEL_COUNT

get_item_information ::= simple_target_specification_2 equals_operator descriptor_item_name

item_number ::= simple_value_specification

simple_target_specification_1 ::= simple_target_specification

simple_target_specification_2 ::= simple_target_specification

descriptor_item_name ::=
		CARDINALITY
	|	CHARACTER_SET_CATALOG
	|	CHARACTER_SET_NAME
	|	CHARACTER_SET_SCHEMA
	|	COLLATION_CATALOG
	|	COLLATION_NAME
	|	COLLATION_SCHEMA
	|	DATA
	|	DATETIME_INTERVAL_CODE
	|	DATETIME_INTERVAL_PRECISION
	|	DEGREE
	|	INDICATOR
	|	KEY_MEMBER
	|	LENGTH
	|	LEVEL
	|	NAME
	|	NULLABLE
	|	OCTET_LENGTH
	|	PARAMETER_MODE
	|	PARAMETER_ORDINAL_POSITION
	|	PARAMETER_SPECIFIC_CATALOG
	|	PARAMETER_SPECIFIC_NAME
	|	PARAMETER_SPECIFIC_SCHEMA
	|	PRECISION
	|	RETURNED_CARDINALITY
	|	RETURNED_LENGTH
	|	RETURNED_OCTET_LENGTH
	|	SCALE
	|	SCOPE_CATALOG
	|	SCOPE_NAME
	|	SCOPE_SCHEMA
	|	TYPE
	|	UNNAMED
	|	USER_DEFINED_TYPE_CATALOG
	|	USER_DEFINED_TYPE_NAME
	|	USER_DEFINED_TYPE_SCHEMA
	|	USER_DEFINED_TYPE_CODE

--h3 19.5 set_descriptor_statement (p937)
--/h3

--p 
Set information in an SQL descriptor area.
--/p

set_descriptor_statement ::= SET [ SQL ] DESCRIPTOR descriptor_name set_descriptor_information

set_descriptor_information ::=
		set_header_information [ { comma set_header_information }... ]
	|	VALUE item_number set_item_information [ { comma set_item_information }... ]

set_header_information ::= header_item_name equals_operator simple_value_specification_1

set_item_information ::= descriptor_item_name equals_operator simple_value_specification_2

simple_value_specification_1 ::= simple_value_specification

simple_value_specification_2 ::= simple_value_specification

item_number ::= simple_value_specification

--h3 19.6 prepare_statement (p941)
--/h3

--p 
Prepare a statement for execution.
--/p

prepare_statement ::=
		PREPARE SQL_statement_name [ attributes_specification ] FROM SQL_statement_variable

attributes_specification ::= ATTRIBUTES attributes_variable

attributes_variable ::= simple_value_specification

SQL_statement_variable ::= simple_value_specification

preparable_statement ::=
		preparable_SQL_data_statement
	|	preparable_SQL_schema_statement
	|	preparable_SQL_transaction_statement
	|	preparable_SQL_control_statement
	|	preparable_SQL_session_statement
	|	preparable_implementation-defined_statement

preparable_SQL_data_statement ::=
		delete_statement:_searched
	|	dynamic_single_row_select_statement
	|	insert_statement
	|	dynamic_select_statement
	|	update_statement:_searched
	|	merge_statement
	|	preparable_dynamic_delete_statement:_positioned
	|	preparable_dynamic_update_statement:_positioned

preparable_SQL_schema_statement ::= SQL_schema_statement

preparable_SQL_transaction_statement ::= SQL_transaction_statement

preparable_SQL_control_statement ::= SQL_control_statement

preparable_SQL_session_statement ::= SQL_session_statement

dynamic_select_statement ::= cursor_specification

preparable_implementation-defined_statement ::= !! See the Syntax Rules.

--h3 19.7 cursor_attributes (p953)
--/h3

--p 
Specify a list of cursor attributes.
--/p

cursor_attributes ::= cursor_attribute...

cursor_attribute ::=
		cursor_sensitivity
	|	cursor_scrollability
	|	cursor_holdability
	|	cursor_returnability

--h3 19.8 deallocate_prepared_statement (p954)
--/h3

--p 
Deallocate SQL-statements that have been prepared with a prepare_statement.
--/p

deallocate_prepared_statement ::= DEALLOCATE PREPARE SQL_statement_name

--h3 19.9 describe_statement (p955)
--/h3

--p 
Obtain information about the select_list columns or dynamic_parameter_specifications contained
in a prepared statement or about the columns of the result set associated with a cursor.
--/p

describe_statement ::= describe_input_statement | describe_output_statement

describe_input_statement ::= DESCRIBE INPUT SQL_statement_name using_descriptor [ nesting_option ]

describe_output_statement ::= DESCRIBE [ OUTPUT ] described_object using_descriptor
[ nesting_option ]

nesting_option ::= WITH NESTING | WITHOUT NESTING

using_descriptor ::= USING [ SQL ] DESCRIPTOR descriptor_name

described_object ::=
		SQL_statement_name
	|	CURSOR extended_cursor_name STRUCTURE

--h3 19.10 input_using_clause (p961)
--/h3

--p 
Supply input values for an SQL_dynamic_statement.
--/p

input_using_clause ::= using_arguments | using_input_descriptor

using_arguments ::= USING using_argument [ { comma using_argument }... ]

using_argument ::= general_value_specification

using_input_descriptor ::= using_descriptor

--h3 19.11 output_using_clause (p965)
--/h3

--p 
Supply output variables for an SQL_dynamic_statement.
--/p

output_using_clause ::= into_arguments | into_descriptor

into_arguments ::= INTO into_argument [ { comma into_argument }... ]

into_argument ::= target_specification

into_descriptor ::= INTO [ SQL ] DESCRIPTOR descriptor_name

--h3 19.12 execute_statement (p970)
--/h3

--p 
Associate input SQL parameters and output targets with a prepared statement and execute the
statement.
--/p

execute_statement ::= EXECUTE SQL_statement_name [ result_using_clause ] [ parameter_using_clause ]

result_using_clause ::= output_using_clause

parameter_using_clause ::= input_using_clause

--h3 19.13 execute_immediate_statement (p972)
--/h3

--p 
Dynamically prepare and execute a preparable statement.
--/p

execute_immediate_statement ::= EXECUTE IMMEDIATE SQL_statement_variable

--h3 19.14 dynamic_declare_cursor (p973)
--/h3

--p 
Declare a cursor to be associated with a statement_name, which may in turn be associated with a
cursor_specification.
--/p

dynamic_declare_cursor ::=
		DECLARE cursor_name [ cursor_sensitivity ] [ cursor_scrollability ] CURSOR
		[ cursor_holdability ] [ cursor_returnability ] FOR statement_name

--h3 19.15 allocate_cursor_statement (p974)
--/h3

--p 
Define a cursor based on a prepared statement for a cursor_specification or assign a cursor to the
ordered set of result sets returned from an SQL-invoked procedure.
--/p

allocate_cursor_statement ::= ALLOCATE extended_cursor_name cursor_intent

cursor_intent ::= statement_cursor | result_set_cursor

statement_cursor ::=
		[ cursor_sensitivity ] [ cursor_scrollability ] CURSOR
		[ cursor_holdability ] [ cursor_returnability ] FOR extended_statement_name

result_set_cursor ::= FOR PROCEDURE specific_routine_designator

--h3 19.16 dynamic_open_statement (p976)
--/h3

--p 
Associate input dynamic parameters with a cursor_specification and open the cursor.
--/p

dynamic_open_statement ::= OPEN dynamic_cursor_name [ input_using_clause ]

--h3 19.17 dynamic_fetch_statement (p977)
--/h3

--p 
Fetch a row for a cursor declared with a dynamic_declare_cursor.
--/p

dynamic_fetch_statement ::= FETCH [ [ fetch_orientation ] FROM ] dynamic_cursor_name output_using_clause

--h3 19.18 dynamic_single_row_select_statement (p978)
--/h3

--p 
Retrieve values from a dynamically-specified row of a table.
--/p

dynamic_single_row_select_statement ::= query_specification

--h3 19.19 dynamic_close_statement (p979)
--/h3

--p 
Close a cursor.
--/p

dynamic_close_statement ::= CLOSE dynamic_cursor_name

--h3 19.20 dynamic_delete_statement:_positioned (p980)
--/h3

--p 
Delete a row of a table.
--/p

dynamic_delete_statement:_positioned ::= DELETE FROM target_table WHERE CURRENT OF dynamic_cursor_name

--h3 19.21 dynamic_update_statement:_positioned (p982)
--/h3

--p 
Update a row of a table.
--/p

dynamic_update_statement:_positioned ::=
		UPDATE target_table SET set_clause_list WHERE CURRENT OF dynamic_cursor_name

--h3 19.22 preparable_dynamic_delete_statement:_positioned (p984)
--/h3

--p 
Delete a row of a table through a dynamic cursor.
--/p

preparable_dynamic_delete_statement:_positioned ::=
		DELETE [ FROM target_table ] WHERE CURRENT OF [ scope_option ] cursor_name

--h3 19.23 preparable_dynamic_update_statement:_positioned (p986)
--/h3

--p 
Update a row of a table through a dynamic cursor.
--/p

preparable_dynamic_update_statement:_positioned ::=
		UPDATE [ target_table ] SET set_clause_list WHERE CURRENT OF [ scope_option ] cursor_name

--hr
--h2 20 Embedded SQL
--/h2

--h3 20.1 embedded_SQL_host_program (p989)
--/h3

--p 
Specify an embedded_SQL_host_program.
--/p

embedded_SQL_host_program ::=
		embedded_SQL_Ada_program
	|	embedded_SQL_C_program
	|	embedded_SQL_COBOL_program
	|	embedded_SQL_Fortran_program
	|	embedded_SQL_MUMPS_program
	|	embedded_SQL_Pascal_program
	|	embedded_SQL_PL/I_program

embedded_SQL_statement ::= SQL_prefix statement_or_declaration [ SQL_terminator ]

statement_or_declaration ::=
		declare_cursor
	|	dynamic_declare_cursor
	|	temporary_table_declaration
	|	embedded_authorization_declaration
	|	embedded_path_specification
	|	embedded_transform_group_specification
	|	embedded_collation_specification
	|	embedded_exception_declaration
	|	handler_declaration
	|	SQL_procedure_statement

SQL_prefix ::= EXEC SQL | ampersandSQLleft_paren

SQL_terminator ::= END-EXEC | semicolon | right_paren

embedded_authorization_declaration ::= DECLARE embedded_authorization_clause

embedded_authorization_clause ::=
		SCHEMA schema_name
	|	AUTHORIZATION embedded_authorization_identifier [ FOR STATIC { ONLY | AND DYNAMIC } ]
	|	SCHEMA schema_name AUTHORIZATION embedded_authorization_identifier [ FOR STATIC { ONLY | AND DYNAMIC } ]

embedded_authorization_identifier ::= module_authorization_identifier

embedded_path_specification ::= path_specification

embedded_transform_group_specification ::= transform_group_specification

embedded_collation_specification ::= module_collations

embedded_SQL_declare_section ::=
		embedded_SQL_begin_declare [ embedded_character_set_declaration ] [ host_variable_definition... ] embedded_SQL_end_declare
	|	embedded_SQL_MUMPS_declare

embedded_character_set_declaration ::= SQL NAMES ARE character_set_specification

embedded_SQL_begin_declare ::= SQL_prefix BEGIN DECLARE SECTION [ SQL_terminator ]

embedded_SQL_end_declare ::= SQL_prefix END DECLARE SECTION [ SQL_terminator ]

embedded_SQL_MUMPS_declare ::=
		SQL_prefix BEGIN DECLARE SECTION [ embedded_character_set_declaration ]
		host_variable_definition... ] END DECLARE SECTION SQL_terminator

host_variable_definition ::=
		Ada_variable_definition
	|	C_variable_definition
	|	COBOL_variable_definition
	|	Fortran_variable_definition
	|	MUMPS_variable_definition
	|	Pascal_variable_definition
	|	PL/I_variable_definition

embedded_variable_name ::= colon host_identifier

host_identifier ::=
		Ada_host_identifier
	|	C_host_identifier
	|	COBOL_host_identifier
	|	Fortran_host_identifier
	|	MUMPS_host_identifier
	|	Pascal_host_identifier
	|	PL/I_host_identifier

--h3 20.2 embedded_exception_declaration (p1001)
--/h3

--p 
Specify the action to be taken when an SQL-statement causes a specific class of condition to be
raised.
--/p

embedded_exception_declaration ::= WHENEVER condition condition_action

condition ::= SQL_condition

SQL_condition ::=
		major_category
	|	SQLSTATE ( SQLSTATE_class_value [ , SQLSTATE_subclass_value ] )
	|	CONSTRAINT constraint_name

major_category ::= SQLEXCEPTION | SQLWARNING | NOT FOUND

SQLSTATE_class_value ::= SQLSTATE_charSQLSTATE_char !! See the Syntax Rules.

SQLSTATE_subclass_value ::= SQLSTATE_charSQLSTATE_charSQLSTATE_char !! See the Syntax Rules.

SQLSTATE_char ::= simple_Latin_upper_case_letter | digit

condition_action ::= CONTINUE | go_to

go_to ::= { GOTO | GO TO } goto_target

goto_target ::=
		host_label_identifier
	|	unsigned_integer
	|	host_PL/I_label_variable

host_label_identifier ::= !! See the Syntax Rules.

host_PL/I_label_variable ::= !! See the Syntax Rules.

--h3 20.3 embedded_SQL_Ada_program (p1005)
--/h3

--p 
Specify an embedded_SQL_Ada_program.
--/p

embedded_SQL_Ada_program ::= !! See the Syntax Rules.

Ada_variable_definition ::=
		Ada_host_identifier [ { comma Ada_host_identifier }... ] colon Ada_type_specification [ Ada_initial_value ]

Ada_initial_value ::= Ada_assignment_operator character_representation...

Ada_assignment_operator ::= colonequals_operator

Ada_host_identifier ::= !! See the Syntax Rules.

Ada_type_specification ::=
		Ada_qualified_type_specification
	|	Ada_unqualified_type_specification
	|	Ada_derived_type_specification

Ada_qualified_type_specification ::=
		Interfaces.SQL period CHAR [ CHARACTER SET [ IS ] character_set_specification ]
		left_paren 1 double_period length right_paren
	|	Interfaces.SQL period SMALLINT
	|	Interfaces.SQL period INT
	|	Interfaces.SQL period BIGINT
	|	Interfaces.SQL period REAL
	|	Interfaces.SQL period DOUBLE_PRECISION
	|	Interfaces.SQL period BOOLEAN
	|	Interfaces.SQL period SQLSTATE_TYPE
	|	Interfaces.SQL period INDICATOR_TYPE

Ada_unqualified_type_specification ::=
		CHAR left_paren 1 double_period length right_paren
	|	SMALLINT
	|	INT
	|	BIGINT
	|	REAL
	|	DOUBLE_PRECISION
	|	BOOLEAN
	|	SQLSTATE_TYPE
	|	INDICATOR_TYPE

Ada_derived_type_specification ::=
		Ada_CLOB_variable
	|	Ada_CLOB_locator_variable
	|	Ada_BLOB_variable
	|	Ada_BLOB_locator_variable
	|	Ada_user-defined_type_variable
	|	Ada_user-defined_type_locator_variable
	|	Ada_REF_variable
	|	Ada_array_locator_variable
	|	Ada_multiset_locator_variable

Ada_CLOB_variable ::=
		SQL TYPE IS CLOB left_paren large_object_length right_paren [ CHARACTER SET [ IS ] character_set_specification ]

Ada_CLOB_locator_variable ::= SQL TYPE IS CLOB AS LOCATOR

Ada_BLOB_variable ::= SQL TYPE IS BLOB left_paren large_object_length right_paren

Ada_BLOB_locator_variable ::= SQL TYPE IS BLOB AS LOCATOR

Ada_user-defined_type_variable ::= SQL TYPE IS path-resolved_user-defined_type_name AS predefined_type

Ada_user-defined_type_locator_variable ::= SQL TYPE IS path-resolved_user-defined_type_name AS LOCATOR

Ada_REF_variable ::= SQL TYPE IS reference_type

Ada_array_locator_variable ::= SQL TYPE IS array_type AS LOCATOR

Ada_multiset_locator_variable ::= SQL TYPE IS multiset_type AS LOCATOR

--h3 20.4 embedded_SQL_C_program (p1011)
--/h3

--p 
Specify an embedded_SQL_C_program.
--/p

embedded_SQL_C_program ::= !! See the Syntax Rules.

C_variable_definition ::= [ C_storage_class ] [ C_class_modifier ] C_variable_specification semicolon

C_variable_specification ::= C_numeric_variable | C_character_variable | C_derived_variable

C_storage_class ::= auto | extern | static

C_class_modifier ::= const | volatile

C_numeric_variable ::=
		{ long long | long | short | float | double } C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] }... ]

C_character_variable ::=
		C_character_type [ CHARACTER SET [ IS ] character_set_specification ]
		C_host_identifier C_array_specification [ C_initial_value ]
		[ { comma C_host_identifier C_array_specification [ C_initial_value ] }... ]

C_character_type ::= char | unsigned char | unsigned short

C_array_specification ::= left_bracket length right_bracket

C_host_identifier ::= !! See the Syntax Rules.

C_derived_variable ::=
		C_VARCHAR_variable
	|	C_NCHAR_variable
	|	C_NCHAR_VARYING_variable
	|	C_CLOB_variable
	|	C_NCLOB_variable
	|	C_BLOB_variable
	|	C_user-defined_type_variable
	|	C_CLOB_locator_variable
	|	C_BLOB_locator_variable
	|	C_array_locator_variable
	|	C_multiset_locator_variable
	|	C_user-defined_type_locator_variable
	|	C_REF_variable

C_VARCHAR_variable ::=
		VARCHAR [ CHARACTER SET [ IS ] character_set_specification ]
		C_host_identifier C_array_specification [ C_initial_value ]
		[ { comma C_host_identifier C_array_specification [ C_initial_value ] }... ]

C_NCHAR_variable ::=
		NCHAR [ CHARACTER SET [ IS ] character_set_specification ]
		C_host_identifier C_array_specification [ C_initial_value ]
		[ { comma C_host_identifier C_array_specification [ C_initial_value ] } ... ]

C_NCHAR_VARYING_variable ::=
		NCHAR VARYING [ CHARACTER SET [ IS ] character_set_specification ]
		C_host_identifier C_array_specification [ C_initial_value ]
		[ { comma C_host_identifier C_array_specification [ C_initial_value ] } ... ]

C_CLOB_variable ::=
		SQL TYPE IS CLOB left_paren large_object_length right_paren
		[ CHARACTER SET [ IS ] character_set_specification ]
		C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] }... ]

C_NCLOB_variable ::=
		SQL TYPE IS NCLOB left_paren large_object_length right_paren
		[ CHARACTER SET [ IS ] character_set_specification ]
		C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] }... ]

C_user-defined_type_variable ::=
		SQL TYPE IS path-resolved_user-defined_type_name AS predefined_type
		C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] } ... ]

C_BLOB_variable ::=
		SQL TYPE IS BLOB left_paren large_object_length right_paren
		C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] } ... ]

C_CLOB_locator_variable ::=
		SQL TYPE IS CLOB AS LOCATOR
		C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] } ... ]

C_BLOB_locator_variable ::=
		SQL TYPE IS BLOB AS LOCATOR
		C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] } ... ]

C_array_locator_variable ::=
		SQL TYPE IS array_type AS LOCATOR
		C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] } ... ]

C_multiset_locator_variable ::=
		SQL TYPE IS multiset_type AS LOCATOR
		C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] } ... ]

C_user-defined_type_locator_variable ::=
		SQL TYPE IS
		path-resolved_user-defined_type_name AS LOCATOR
		C_host_identifier [ C_initial_value ]
		[ { comma C_host_identifier [ C_initial_value ] }... ]

C_REF_variable ::= SQL TYPE IS reference_type

C_initial_value ::= equals_operator character_representation...

--h3 20.5 embedded_SQL_COBOL_program (p1019)
--/h3

--p 
Specify an embedded_SQL_COBOL_program.
--/p

embedded_SQL_COBOL_program ::= !! See the Syntax Rules.

COBOL_variable_definition ::=
		{01|77} COBOL_host_identifier COBOL_type_specification
		[ character_representation... ] period

COBOL_host_identifier ::= !! See the Syntax Rules.

COBOL_type_specification ::=
		COBOL_character_type
	|	COBOL_national_character_type
	|	COBOL_numeric_type
	|	COBOL_integer_type
	|	COBOL_derived_type_specification

COBOL_derived_type_specification ::=
		COBOL_CLOB_variable
	|	COBOL_NCLOB_variable
	|	COBOL_BLOB_variable
	|	COBOL_user-defined_type_variable
	|	COBOL_CLOB_locator_variable
	|	COBOL_BLOB_locator_variable
	|	COBOL_array_locator_variable
	|	COBOL_multiset_locator_variable
	|	COBOL_user-defined_type_locator_variable
	|	COBOL_REF_variable

COBOL_character_type ::=
		[ CHARACTER SET [ IS ] character_set_specification ]
		{ PIC | PICTURE } [ IS ] { X [ left_paren length right_paren ] }...

COBOL_national_character_type ::=
		[ CHARACTER SET [ IS ] character_set_specification ]
		{ PIC | PICTURE } [ IS ] { N [ left_paren length right_paren ] }...

COBOL_CLOB_variable ::=
		[ USAGE [ IS ] ]
		SQL TYPE IS CLOB left_paren large_object_length right_paren
		[ CHARACTER SET [ IS ] character_set_specification ]

COBOL_NCLOB_variable ::=
		[ USAGE [ IS ] ]
		SQL TYPE IS NCLOB left_paren large_object_length right_paren
		[ CHARACTER SET [ IS ] character_set_specification ]

COBOL_BLOB_variable ::=
		[ USAGE [ IS ] ]
		SQL TYPE IS BLOB left_paren large_object_length right_paren

COBOL_user-defined_type_variable ::=
		[ USAGE [ IS ] ] SQL TYPE IS path-resolved_user-defined_type_name AS predefined_type

COBOL_CLOB_locator_variable ::=
		[ USAGE [ IS ] ] SQL TYPE IS CLOB AS LOCATOR

COBOL_BLOB_locator_variable ::=
		[ USAGE [ IS ] ] SQL TYPE IS BLOB AS LOCATOR

COBOL_array_locator_variable ::=
	[ USAGE [ IS ] ] SQL TYPE IS array_type AS LOCATOR

COBOL_multiset_locator_variable ::=
	[ USAGE [ IS ] ] SQL TYPE IS multiset_type AS LOCATOR

COBOL_user-defined_type_locator_variable ::=
	[ USAGE [ IS ] ] SQL TYPE IS path-resolved_user-defined_type_name AS LOCATOR

COBOL_REF_variable ::= [ USAGE [ IS ] ] SQL TYPE IS reference_type

COBOL_numeric_type ::=
		{ PIC | PICTURE } [ IS ] S COBOL_nines_specification [ USAGE [ IS ] ] DISPLAY SIGN LEADING SEPARATE

COBOL_nines_specification ::=
		COBOL_nines [ V [ COBOL_nines ] ]
	|	V COBOL_nines

COBOL_integer_type ::= COBOL_binary_integer

COBOL_binary_integer ::= { PIC | PICTURE } [ IS ] SCOBOL_nines [ USAGE [ IS ] ] BINARY

COBOL_nines ::= { 9 [ left_paren length right_paren ] }...

--h3 20.6 embedded_SQL_Fortran_program (p1025)
--/h3

--p 
Specify an embedded_SQL_Fortran_program.
--/p

embedded_SQL_Fortran_program ::= !! See the Syntax Rules.

Fortran_variable_definition ::=
		Fortran_type_specification Fortran_host_identifier [ { comma Fortran_host_identifier }... ]

Fortran_host_identifier ::= !! See the Syntax Rules.

Fortran_type_specification ::=
		CHARACTER [ asterisk length ] [ CHARACTER SET [ IS ] character_set_specification ]
	|	CHARACTER KIND = n [ asterisk length ] [ CHARACTER SET [ IS ] character_set_specification ]
	|	INTEGER
	|	REAL
	|	DOUBLE PRECISION
	|	LOGICAL
	|	Fortran_derived_type_specification

Fortran_derived_type_specification ::=
		Fortran_CLOB_variable
	|	Fortran_BLOB_variable
	|	Fortran_user-defined_type_variable
	|	Fortran_CLOB_locator_variable
	|	Fortran_BLOB_locator_variable
	|	Fortran_user-defined_type_locator_variable
	|	Fortran_array_locator_variable
	|	Fortran_multiset_locator_variable
	|	Fortran_REF_variable

Fortran_CLOB_variable ::=
		SQL TYPE IS CLOB left_paren large_object_length right_paren
		[ CHARACTER SET [ IS ] character_set_specification ]

Fortran_BLOB_variable ::=
		SQL TYPE IS BLOB left_paren large_object_length right_paren

Fortran_user-defined_type_variable ::=
		SQL TYPE IS path-resolved_user-defined_type_name AS predefined_type

Fortran_CLOB_locator_variable ::= SQL TYPE IS CLOB AS LOCATOR

Fortran_BLOB_locator_variable ::= SQL TYPE IS BLOB AS LOCATOR

Fortran_user-defined_type_locator_variable ::= SQL TYPE IS path-resolved_user-defined_type_name AS LOCATOR

Fortran_array_locator_variable ::= SQL TYPE IS array_type AS LOCATOR

Fortran_multiset_locator_variable ::= SQL TYPE IS multiset_type AS LOCATOR

Fortran_REF_variable ::= SQL TYPE IS reference_type

--h3 20.7 embedded_SQL_MUMPS_program (p1030)
--/h3

--p 
Specify an embedded_SQL_MUMPS_program.
--/p

embedded_SQL_MUMPS_program ::= !! See the Syntax Rules.

MUMPS_variable_definition ::=
		MUMPS_numeric_variable semicolon
	|	MUMPS_character_variable semicolon
	|	MUMPS_derived_type_specification semicolon

MUMPS_character_variable ::=
		VARCHAR MUMPS_host_identifier MUMPS_length_specification
		[ { comma MUMPS_host_identifier MUMPS_length_specification }... ]

MUMPS_host_identifier ::= !! See the Syntax Rules.

MUMPS_length_specification ::= left_paren length right_paren

MUMPS_numeric_variable ::= MUMPS_type_specification MUMPS_host_identifier [ { comma MUMPS_host_identifier }... ]

MUMPS_type_specification ::=
		INT
	|	DEC [ left_paren precision [ comma scale ] right_paren ]
	|	REAL

MUMPS_derived_type_specification ::=
		MUMPS_CLOB_variable
	|	MUMPS_BLOB_variable
	|	MUMPS_user-defined_type_variable
	|	MUMPS_CLOB_locator_variable
	|	MUMPS_BLOB_locator_variable
	|	MUMPS_user-defined_type_locator_variable
	|	MUMPS_array_locator_variable
	|	MUMPS_multiset_locator_variable
	|	MUMPS_REF_variable

MUMPS_CLOB_variable ::=
		SQL TYPE IS CLOB left_paren large_object_length right_paren
		[ CHARACTER SET [ IS ] character_set_specification ]

MUMPS_BLOB_variable ::= SQL TYPE IS BLOB left_paren large_object_length right_paren

MUMPS_user-defined_type_variable ::= SQL TYPE IS path-resolved_user-defined_type_name AS predefined_type

MUMPS_CLOB_locator_variable ::= SQL TYPE IS CLOB AS LOCATOR

MUMPS_BLOB_locator_variable ::= SQL TYPE IS BLOB AS LOCATOR

MUMPS_user-defined_type_locator_variable ::= SQL TYPE IS path-resolved_user-defined_type_name AS LOCATOR

MUMPS_array_locator_variable ::= SQL TYPE IS array_type AS LOCATOR

MUMPS_multiset_locator_variable ::= SQL TYPE IS multiset_type AS LOCATOR

MUMPS_REF_variable ::= SQL TYPE IS reference_type

--h3 20.8 embedded_SQL_Pascal_program (p1035)
--/h3

--p 
Specify an embedded_SQL_Pascal_program.
--/p

embedded_SQL_Pascal_program ::= !! See the Syntax Rules.

Pascal_variable_definition ::=
		Pascal_host_identifier [ { comma Pascal_host_identifier }... ] colon Pascal_type_specification semicolon

Pascal_host_identifier ::= !! See the Syntax Rules.

Pascal_type_specification ::=
		PACKED ARRAY left_bracket 1 double_period length right_bracket OF CHAR
		[ CHARACTER SET [ IS ] character_set_specification ]
	|	INTEGER
	|	REAL
	|	CHAR [ CHARACTER SET [ IS ] character_set_specification ]
	|	BOOLEAN
	|	Pascal_derived_type_specification

Pascal_derived_type_specification ::=
		Pascal_CLOB_variable
	|	Pascal_BLOB_variable
	|	Pascal_user-defined_type_variable
	|	Pascal_CLOB_locator_variable
	|	Pascal_BLOB_locator_variable
	|	Pascal_user-defined_type_locator_variable
	|	Pascal_array_locator_variable
	|	Pascal_multiset_locator_variable
	|	Pascal_REF_variable

Pascal_CLOB_variable ::=
		SQL TYPE IS CLOB left_paren large_object_length right_paren
		[ CHARACTER SET [ IS ] character_set_specification ]

Pascal_BLOB_variable ::= SQL TYPE IS BLOB left_paren large_object_length right_paren

Pascal_CLOB_locator_variable ::= SQL TYPE IS CLOB AS LOCATOR

Pascal_user-defined_type_variable ::= SQL TYPE IS path-resolved_user-defined_type_name AS predefined_type

Pascal_BLOB_locator_variable ::= SQL TYPE IS BLOB AS LOCATOR

Pascal_user-defined_type_locator_variable ::= SQL TYPE IS path-resolved_user-defined_type_name AS LOCATOR

Pascal_array_locator_variable ::= SQL TYPE IS array_type AS LOCATOR

Pascal_multiset_locator_variable ::= SQL TYPE IS multiset_type AS LOCATOR

Pascal_REF_variable ::= SQL TYPE IS reference_type

--h3 20.9 embedded_SQL_PL/I_program (p1040)
--/h3

--p 
Specify an embedded_SQL_PL/I_program.
--/p

embedded_SQL_PL/I_program ::= !! See the Syntax Rules.

PL/I_variable_definition ::=
		{DCL | DECLARE} { PL/I_host_identifier
	|	left_paren PL/I_host_identifier [ { comma PL/I_host_identifier }... ] right_paren }
		PL/I_type_specification [ character_representation... ] semicolon

PL/I_host_identifier ::= !! See the Syntax Rules.

PL/I_type_specification ::=
		{ CHAR | CHARACTER } [ VARYING ] left_parenlengthright_paren [ CHARACTER SET [ IS ] character_set_specification ]
	|	PL/I_type_fixed_decimal left_paren precision [ comma scale ] right_paren
	|	PL/I_type_fixed_binary [ left_paren precision right_paren ]
	|	PL/I_type_float_binary left_paren precision right_paren
	|	PL/I_derived_type_specification

PL/I_derived_type_specification ::=
		PL/I_CLOB_variable
	|	PL/I_BLOB_variable
	|	PL/I_user-defined_type_variable
	|	PL/I_CLOB_locator_variable
	|	PL/I_BLOB_locator_variable
	|	PL/I_user-defined_type_locator_variable
	|	PL/I_array_locator_variable
	|	PL/I_multiset_locator_variable
	|	PL/I_REF_variable

PL/I_CLOB_variable ::=
		SQL TYPE IS CLOB left_paren large_object_length right_paren
		[ CHARACTER SET [ IS ] character_set_specification ]

PL/I_BLOB_variable ::= SQL TYPE IS BLOB left_paren large_object_length right_paren

PL/I_user-defined_type_variable ::= SQL TYPE IS path-resolved_user-defined_type_name AS predefined_type

PL/I_CLOB_locator_variable ::= SQL TYPE IS CLOB AS LOCATOR

PL/I_BLOB_locator_variable ::= SQL TYPE IS BLOB AS LOCATOR

PL/I_user-defined_type_locator_variable ::= SQL TYPE IS path-resolved_user-defined_type_name AS LOCATOR

PL/I_array_locator_variable ::= SQL TYPE IS array_type AS LOCATOR

PL/I_multiset_locator_variable ::= SQL TYPE IS multiset_type AS LOCATOR

PL/I_REF_variable ::= SQL TYPE IS reference_type

PL/I_type_fixed_decimal ::=
		{ DEC | DECIMAL } FIXED
	|	FIXED { DEC | DECIMAL }

PL/I_type_fixed_binary ::=
		{ BIN | BINARY } FIXED
	|	FIXED { BIN | BINARY }

PL/I_type_float_binary ::=
		{ BIN | BINARY } FLOAT
	|	FLOAT { BIN | BINARY }

--hr
--h2 21 Direct invocation of SQL
--/h2

--h3 21.1 direct_SQL_statement (p1047)
--/h3

--p 
Specify direct execution of SQL.
--/p

direct_SQL_statement ::= directly_executable_statement semicolon

directly_executable_statement ::=
		direct_SQL_data_statement
	|	SQL_schema_statement
	|	SQL_transaction_statement
	|	SQL_connection_statement
	|	SQL_session_statement
	|	direct_implementation-defined_statement

direct_SQL_data_statement ::=
		delete_statement:_searched
	|	direct_select_statement:_multiple_rows
	|	insert_statement
	|	update_statement:_searched
	|	merge_statement
	|	temporary_table_declaration

direct_implementation-defined_statement ::= !! See the Syntax Rules

--h3 21.2 direct_select_statement:_multiple_rows (p1051)
--/h3

--p 
Specify a statement to retrieve multiple rows from a specified table.
--/p

direct_select_statement:_multiple_rows ::= cursor_specification

--hr
--h2 22 Diagnostics management
--h3 22.1 get_diagnostics_statement (p1053)
--/h3

--p
Get exception or completion condition information from a diagnostics area.
--/p

get_diagnostics_statement ::= GET DIAGNOSTICS SQL_diagnostics_information

SQL_diagnostics_information ::= statement_information | condition_information

statement_information ::= statement_information_item [ { comma statement_information_item }... ]

statement_information_item ::= simple_target_specification equals_operator statement_information_item_name

statement_information_item_name ::=
		NUMBER
	|	MORE
	|	COMMAND_FUNCTION
	|	COMMAND_FUNCTION_CODE
	|	DYNAMIC_FUNCTION
	|	DYNAMIC_FUNCTION_CODE
	|	ROW_COUNT
	|	TRANSACTIONS_COMMITTED
	|	TRANSACTIONS_ROLLED_BACK
	|	TRANSACTION_ACTIVE

condition_information ::=
		{ EXCEPTION | CONDITION } condition_number condition_information_item [ { comma condition_information_item }... ]

condition_information_item ::= simple_target_specification equals_operator condition_information_item_name

condition_information_item_name ::=
		CATALOG_NAME
	|	CLASS_ORIGIN
	|	COLUMN_NAME
	|	CONDITION_NUMBER
	|	CONNECTION_NAME
	|	CONSTRAINT_CATALOG
	|	CONSTRAINT_NAME
	|	CONSTRAINT_SCHEMA
	|	CURSOR_NAME
	|	MESSAGE_LENGTH
	|	MESSAGE_OCTET_LENGTH
	|	MESSAGE_TEXT
	|	PARAMETER_MODE
	|	PARAMETER_NAME
	|	PARAMETER_ORDINAL_POSITION
	|	RETURNED_SQLSTATE
	|	ROUTINE_CATALOG
	|	ROUTINE_NAME
	|	ROUTINE_SCHEMA
	|	SCHEMA_NAME
	|	SERVER_NAME
	|	SPECIFIC_NAME
	|	SUBCLASS_ORIGIN
	|	TABLE_NAME
	|	TRIGGER_CATALOG
	|	TRIGGER_NAME
	|	TRIGGER_SCHEMA

condition_number ::= simple_value_specification

--h3 22.2 Pushing and popping the diagnostics area stack (p1068)
--/h3

--hr
--h2 23 Status codes
--/h2

--h3 23.1 SQLSTATE (p1069)
--/h3

--p
The character string value returned in an SQLSTATE parameter comprises a
2-character class value followed by a 3-character subclass value, each
with an implementation-defined character set that has a one-octet
character encoding form and is restricted to digits and
simple_Latin_upper_case_letters.
Table 31, 'SQLSTATE class and subclass values', specifies the class
value for each condition and the subclass value or values for each class
value.
--/p
--p
Class values that begin with one of the digits '0', '1', '2', '3', or
'4' or one of the simple_Latin_upper_case_letters 'A', 'B', 'C', 'D',
'E', 'F', 'G', or 'H' are returned only for conditions defined in
ISO/IEC 9075 or in any other International Standard.
The range of such class values are called standard-defined
classes.
Some such class codes are reserved for use by specific International
Standards, as specified elsewhere in this Clause.
Subclass values associated with such classes that also begin with one of
those 13 characters are returned only for conditions defined in ISO/IEC
9075 or some
other International Standard.
The range of such class values are called standard-defined classes.
Subclass values associated with such classes that begin with one of the
digits '5', '6', '7', '8', or '9' or one of the <simple Latin upper
case letter>s 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
'T', 'U', 'V', 'W', 'X', 'Y', or 'Z' are reserved for
implementation-specified conditions and are called
implementation-defined subclasses.
--/p
--p
Class values that begin with one of the digits '5', '6', '7', '8', or
'9' or one of the simple_Latin_upper_case_letters 'I', 'J', 'K', 'L',
'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', or 'Z'
are reserved for implementation-specified exception conditions and are
called implementation-defined classes.
All subclass values except '000', which means no subclass, associated
with such classes are reserved for implementation-specified conditions
and are called implementation-defined subclasses.
An implementation-defined completion condition shall be indicated by
returning an implementation-defined subclass in conjunction with one of
the classes successful completion, warning, or no data.
--/p


--p
The 'Category' column has the following meanings: 'S' means that the class value given corresponds
to successful completion and is a completion condition; 'W' means that the class value given
corresponds to a successful completion but with a warning and is a completion condition; 'N' means
that the class value given corresponds to a no-data situation and is a completion condition; 'X'
means that the class value given corresponds to an exception condition.
--/p

--p
Table 31 - SQLSTATE class and subclass values
--/p

--## table_border=1
--## trth Category /thth Condition /thth Class /thth Subcondition /thth Subclass /th/tr
--## trtd X /tdtd ambiguous cursor name /tdtd 3C /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd attempt to assign to non-updatable column /tdtd 0U /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd attempt to assign to ordering column /tdtd 0V /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd cardinality violation /tdtd 21 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd connection exception /tdtd 08 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd connection does not exist /tdtd 003 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd connection failure /tdtd 006 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd connection name in use /tdtd 002 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd SQL-client unable to establish SQL-connection /tdtd 001 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd SQL-server rejected establishment of SQL-connection /tdtd 004 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd transaction resolution unknown /tdtd 007 /td/tr
--## trtd X /tdtd cursor sensitivity exception /tdtd 36 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd request failed /tdtd 002 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd request rejected /tdtd 001 /td/tr
--## trtd X /tdtd data exception /tdtd 22 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd array data, right truncation /tdtd 02F /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd array element error /tdtd 02E /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd character not in repertoire /tdtd 021 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd datetime field overflow /tdtd 008 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd division by zero /tdtd 012 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd error in assignment /tdtd 005 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd escape character conflict /tdtd 00B /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd indicator overflow /tdtd 022 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd interval field overflow /tdtd 015 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid argument for natural logarithm /tdtd 01E /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid argument for power function /tdtd 01F /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid argument for width bucket function /tdtd 01G /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid character value for cast /tdtd 018 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid datetime format /tdtd 007 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid escape character /tdtd 019 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid escape octet /tdtd 00D /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid escape sequence /tdtd 025 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid indicator parameter value /tdtd 010 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid interval format /tdtd 006 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid parameter value /tdtd 023 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid preceding or following size in window function /tdtd 013 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid regular expression /tdtd 01B /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid repeat argument in a sample clause /tdtd 02G /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid sample size /tdtd 02H /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid time zone displacement value /tdtd 009 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid use of escape character /tdtd 00C /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd most specific type mismatch /tdtd 00G /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd noncharacter in UCS string /tdtd 029 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd null value substituted for mutator subject parameter /tdtd 02D /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd null row not permitted in table /tdtd 01C /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd null value in array target /tdtd 00E /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd null value, no indicator parameter /tdtd 002 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd null value not allowed /tdtd 004 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd numeric value out of range /tdtd 003 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd sequence generator limit exceeded /tdtd 00H /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd string data, length mismatch /tdtd 026 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd string data, right truncation /tdtd 001 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd substring error /tdtd 011 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd trim error /tdtd 027 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd unterminated C string /tdtd 024 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd zero-length character string /tdtd 00F /td/tr
--## trtd X /tdtd dependent privilege descriptors still exist /tdtd 2B /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd diagnostics exception /tdtd 0Z /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd maximum number of stacked diagnostics areas exceeded /tdtd 001 /td/tr
--## trtd X /tdtd dynamic SQL error /tdtd 07 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd cursor specification cannot be executed /tdtd 003 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd data type transform function violation /tdtd 00B /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid DATA target /tdtd 00D /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid DATETIME_INTERVAL_CODE /tdtd 00F /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid descriptor count /tdtd 008 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid descriptor index /tdtd 009 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid LEVEL value /tdtd 00E /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd prepared statement not a cursor specification /tdtd 005 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd restricted data type attribute violation /tdtd 006 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd undefined DATA value /tdtd 00C /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd using clause does not match dynamic parameter specifications /tdtd 001 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd using clause does not match target specifications /tdtd 002 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd using clause required for dynamic parameters /tdtd 004 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd using clause required for result fields /tdtd 007 /td/tr
--## trtd X /tdtd external routine exception /tdtd 38 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd containing SQL not permitted /tdtd 001 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd modifying SQL-data not permitted /tdtd 002 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd prohibited SQL-statement attempted /tdtd 003 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd reading SQL-data not permitted /tdtd 004 /td/tr
--## trtd X /tdtd external routine invocation exception /tdtd 39 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid SQLSTATE returned /tdtd 001 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd null value not allowed /tdtd 004 /td/tr
--## trtd X /tdtd feature not supported /tdtd 0A /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd multiple server transactions /tdtd 001 /td/tr
--## trtd X /tdtd integrity constraint violation /tdtd 23 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd restrict violation /tdtd 001 /td/tr
--## trtd X /tdtd invalid authorization specification /tdtd 28 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid catalog name /tdtd 3D /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid character set name /tdtd 2C /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid condition number /tdtd 35 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid connection name /tdtd 2E /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid cursor name /tdtd 34 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid cursor state /tdtd 24 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid grantor /tdtd 0L /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid role specification /tdtd 0P /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid schema name /tdtd 3F /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid schema name list specification /tdtd 0E /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid session collation specification /tdtd 2H /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid SQL descriptor name /tdtd 33 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid SQL-invoked procedure reference /tdtd 0M /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid SQL statement name /tdtd 26 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid SQL statement identifier /tdtd 30 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid target type specification /tdtd 0D /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid transaction initiation /tdtd 0B /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid transaction state /tdtd 25 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd active SQL-transaction /tdtd 001 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd branch transaction already active /tdtd 002 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd held cursor requires same isolation level /tdtd 008 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd inappropriate access mode for branch transaction /tdtd 003 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd inappropriate isolation level for branch transaction /tdtd 004 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd no active SQL-transaction for branch transaction /tdtd 005 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd read-only SQL-transaction /tdtd 006 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd schema and data statement mixing not supported /tdtd 007 /td/tr
--## trtd X /tdtd invalid transaction termination /tdtd 2D /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd invalid transform group name specification /tdtd 0S /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd locator exception /tdtd 0F /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid specification /tdtd 001 /td/tr
--## trtd N /tdtd no data /tdtd 02 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd no additional dynamic result sets returned /tdtd 001 /td/tr
--## trtd X /tdtd prohibited statement encountered during trigger execution /tdtd 0W /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd Remote Database Access /tdtd HZ /tdtd (See Table 32, 'SQLSTATE class codes for RDA', for the definition of protocol subconditions and subclass code values) /tdtd &nbsp; /td/tr
--## trtd X /tdtd savepoint exception /tdtd 3B /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd invalid specification /tdtd 001 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd too many /tdtd 002 /td/tr
--## trtd X /tdtd SQL routine exception /tdtd 2F /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd function executed no return statement /tdtd 005 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd modifying SQL-data not permitted /tdtd 002 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd prohibited SQL-statement attempted /tdtd 003 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd reading SQL-data not permitted /tdtd 004 /td/tr
--## trtd S /tdtd successful completion /tdtd 00 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd syntax error or access rule violation /tdtd 42 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd target table disagrees with cursor specification /tdtd 0T /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd transaction rollback /tdtd 40 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd integrity constraint violation /tdtd 002 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd serialization failure /tdtd 001 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd statement completion unknown /tdtd 003 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd triggered action exception /tdtd 004 /td/tr
--## trtd X /tdtd triggered action exception /tdtd 09 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd X /tdtd triggered data change violation /tdtd 27 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd W /tdtd warning /tdtd 01 /tdtd (no subclass) /tdtd 000 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd additional result sets returned /tdtd 00D /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd array data, right truncation /tdtd 02F /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd attempt to return too many result sets /tdtd 00E /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd cursor operation conflict /tdtd 001 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd default value too long for information schema /tdtd 00B /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd disconnect error /tdtd 002 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd dynamic result sets returned /tdtd 00C /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd external routine warning (the value of xx to be chosen by the author of the external routine) /tdtd Hxx /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd insufficient item descriptor areas /tdtd 005 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd null value eliminated in set function /tdtd 003 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd privilege not granted /tdtd 007 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd privilege not revoked /tdtd 006 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd query expression too long for information schema /tdtd 00A /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd search condition too long for information schema /tdtd 009 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd statement too long for information schema /tdtd 008 /td/tr
--## trtd &nbsp; /tdtd &nbsp; /tdtd &nbsp; /tdtd string data, right truncation /tdtd 004 /td/tr
--## trtd X /tdtd with check option violation /tdtd 44 /tdtd (no subclass) /tdtd 000 /td/tr
--## /table


--hr
--h2 24 Conformance
--/h2

--h3 24.1 General Conformance Requirements (p1079)
--/h3

--p
Table 33 - Implied feature relationships
--/p

--## table_border=1
--## trth Feature ID /thth Feature Description /thth Implied Feature /thth ID Implied Feature Description /th/tr 
--## trtd B032 /tdtd Extended dynamic SQL /tdtd B031 /tdtd Basic dynamic SQL /td/tr
--## trtd B034 /tdtd Dynamic specification of cursor attributes /tdtd B031 /tdtd Basic dynamic SQL /td/tr
--## trtd F381 /tdtd Extended schema manipulation /tdtd F491 /tdtd Constraint management /td/tr
--## trtd F451 /tdtd Character set definition /tdtd F461 /tdtd Named character sets /td/tr
--## trtd F711 /tdtd ALTER domain /tdtd F251 /tdtd Domain support /td/tr
--## trtd F801 /tdtd Full set function /tdtd F441 /tdtd Extended set function support /td/tr
--## trtd S024 /tdtd Enhanced structured types /tdtd S023 /tdtd Basic structured types /td/tr
--## trtd S041 /tdtd Basic reference types /tdtd S023 /tdtd Basic structured types /td/tr
--## trtd S041 /tdtd Basic reference types /tdtd S051 /tdtd Create table of type /td/tr
--## trtd S043 /tdtd Enhanced reference types /tdtd S041 /tdtd Basic reference types /td/tr
--## trtd S051 /tdtd Create table of type /tdtd S023 /tdtd Basic structured types /td/tr
--## trtd S081 /tdtd Subtables /tdtd S023 /tdtd Basic structured types /td/tr
--## trtd S081 /tdtd Subtables /tdtd S051 /tdtd Create table of type /td/tr
--## trtd S092 /tdtd Arrays of user-defined types /tdtd S091 /tdtd Basic array support /td/tr
--## trtd S094 /tdtd Arrays of reference types /tdtd S041 /tdtd Basic reference types /td/tr
--## trtd S094 /tdtd Arrays of reference types /tdtd S091 /tdtd Basic array support /td/tr
--## trtd S095 /tdtd Array constructors by query /tdtd S091 /tdtd Basic array support /td/tr
--## trtd S096 /tdtd Optional array bounds /tdtd S091 /tdtd Basic array support /td/tr
--## trtd S111 /tdtd ONLY in query expressions /tdtd S023 /tdtd Basic structured types /td/tr
--## trtd S111 /tdtd ONLY in query expressions /tdtd S051 /tdtd Create table of type /td/tr
--## trtd S201 /tdtd SQL-invoked routines on arrays /tdtd S091 /tdtd Basic array support /td/tr
--## trtd S202 /tdtd SQL-invoked routines on multisets /tdtd S271 /tdtd Basic multiset support /td/tr
--## trtd S231 /tdtd Structured type locators /tdtd S023 /tdtd Basic structured types /td/tr
--## trtd S232 /tdtd Array locators /tdtd S091 /tdtd Basic array support /td/tr
--## trtd S233 /tdtd Multiset locators /tdtd S271 /tdtd Basic multiset support /td/tr
--## trtd S242 /tdtd Alter transform statement /tdtd S241 /tdtd Transform functions /td/tr
--## trtd S272 /tdtd Multisets of user-defined types /tdtd S271 /tdtd Basic multiset support /td/tr
--## trtd S274 /tdtd Multisets of reference types /tdtd S041 /tdtd Basic reference types /td/tr
--## trtd S274 /tdtd Multisets of reference types /tdtd S271 /tdtd Basic multiset support /td/tr
--## trtd S275 /tdtd Advanced multiset support /tdtd S271 /tdtd Basic multiset support /td/tr
--## trtd T042 /tdtd Extended LOB data type support /tdtd T041 /tdtd Basic LOB data type support /td/tr
--## trtd T061 /tdtd UCS Support /tdtd F461 /tdtd Named character sets /td/tr
--## trtd T071 /tdtd BIGINT data type /tdtd E001-01 /tdtd INTEGER and SMALLINT data types (including all spellings) /td/tr
--## trtd T131 /tdtd Recursive query /tdtd T121 /tdtd WITH (excluding RECURSIVE) in query expression /td/tr
--## trtd T173 /tdtd Extended LIKE clause in table definition /tdtd T171 /tdtd LIKE clause in table definition /td/tr
--## trtd T212 /tdtd Enhanced trigger capability /tdtd T211 /tdtd Basic trigger capability /td/tr
--## trtd T332 /tdtd Extended roles /tdtd T331 /tdtd Basic roles /td/tr
--## trtd T511 /tdtd Transaction counts /tdtd F121 /tdtd Basic diagnostics management /td/tr
--## trtd T571 /tdtd Array-returning external SQL-invoked functions /tdtd S091 /tdtd Basic array support /td/tr
--## trtd T571 /tdtd Array-returning external SQL-invoked functions /tdtd S201 /tdtd SQL-invoked routines on arrays /td/tr
--## trtd T572 /tdtd Multiset-returning external SQLinvoked functions /tdtd S202 /tdtd SQL-invoked routines on multisets /td/tr
--## trtd T572 /tdtd Multiset-returning external SQLinvoked functions /tdtd S271 /tdtd Basic multiset support /td/tr
--## trtd T612 /tdtd Advanced OLAP operations /tdtd T611 /tdtd Elementary OLAP operations /td/tr
--## /table


--hr
--h2 END OF SQL-2003 Part 2 (SQL/Foundation) GRAMMAR
--/h2

--h2 Notes on Automatically Converting the SQL Grammar to a YACC Grammar
--/h2

--p
Automatic translation of this grammar is non-trivial for a number of
reasons.
One is that the grammar has a number of actions '!!
See the Syntax Rules' which cannot be translated automatically.
Another is that the grammar contains rules that are usually better
handled by the lexical analyzer than the grammar proper.
Then there are incomplete rules such as those which reference parts 6
to 10 (they are not defined; indeed, part 7, which was going to be
SQL/Temporal, is in complete abeyance), and the packages (almost
completely undefined in the grammar).
It is not clear whether these can be ignored, or annotated out of the
way.
--/p

--p
Another complication is automatically generating rules to deal with
optional components and repetitive components in the grammar.
Square brackets do not contain alternative non-terminals; all those
expressions are contained within curly brackets within the square
brackets.
However, some square brackets do contain alternative terminals.
Curly brackets contain and group mandatory elements.
However, they are usually used in conjunction with the 'one or more
times' repeater ellipsis '...' mark.
--/p

--hr
--h2 END OF SQL 2003-2 (SQL/FOUNDATION) GRAMMAR
--/h2

