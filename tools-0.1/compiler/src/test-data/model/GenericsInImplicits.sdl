public interface Scalar<T>
{
    T value(final Element element) throws SQLException;
}


public interface ValueExpression<T> extends Scalar<T> : SqlBuilder
{}

public class Value<R> implements ValueExpression<R>
{}

<S> ValueExpression<S> ::=
		e:ValueExpressionPrimary<S>
		:: implicit
;

<T extends Number> ValueExpression<Number> ::=
    l:ValueExpressionPrimary<T> PLUS r:ValueExpressionPrimary<T> :: public Value<Number> plus {
        public Number value(final Element element) throws SQLException {
            return Element.getBigDecimal();
        }
    }
;


public interface BooleanValueExpression extends Scalar<Boolean> : SqlBuilder
{}

ValueExpression<Boolean> ::= bve: BooleanValueExpression
	    :: implicit
;


public interface ValueExpressionPrimary<U> extends Scalar<U> : SqlBuilder
{}

public class AbstractValueExpressionPrimary<V> implements ValueExpressionPrimary<V>
{}



