public interface Scalar<T>
{
    T value(final Element element) throws SQLException;
}


public interface ValueExpression<T> extends Scalar<T> : Sql
{}

public class Value<T> implements ValueExpression<T>
{}

<T> ValueExpression<T> ::=
		e:ValueExpressionPrimary<T>
		:: implicit
;

<T extends Number> ValueExpression<Number> ::=
    l:ValueExpressionPrimary<T> PLUS r:ValueExpressionPrimary<T> :: public Value<Number> plus {
        public Number value(final Element element) throws SQLException {
            return Element.getBigDecimal();
        }
    }
;

public interface BooleanValueExpression extends Scalar<Boolean> : Sql
{}

public class AbstractBooleanValueExpression implements BooleanValueExpression
{}

public interface ValueExpressionPrimary<T> extends Scalar<T> : Sql
{}

public class AbstractValueExpressionPrimary<T> implements ValueExpressionPrimary<T>
{}

<T> ValueExpressionPrimary<T> ::=
    LEFT_PAREN ve:ValueExpression<T> RIGHT_PAREN ::  implicit
|
    cr:ColumnReference<T> ::  implicit
;

public interface	ColumnReference<T> extends Scalar<T> : Sql
{}





