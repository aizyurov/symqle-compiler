public interface Scalar<T>
{
    T value(final Element element);
}

public interface expression_<T> extends Scalar<T> : SqlBuilder
{}

public class Expression<T> implements expression_<T> with exBuilder
{
}

public interface term_<T> extends Scalar<T> : SqlBuilder
{}

public class Term<T> implements term_<T> with tBuilder
{
}

<T> expression_<T> ::=
    t:term_<T>
        :: Term<T> mimics Expression<T>
{}
|
    e:expression_<T> PLUS t:term_<T>
        :: Expression<T>
        {
            public Expression<T> add(final term t) {
                return new Expression<T>(_APPLY_RULE_(this, t));
            }
        }
;

public interface primary_<T> extends Scalar<T> : SqlBuilder
{
}

public class Primary<T> implements primary_<T> with pBuilder
{}

<T> term_<T> ::=
    p:primary_<T>
        :: Primary<T> mimics Term<T> {}
|
    t:term_<T> ASTERISK p:primary_<T>
        :: Term<T>
        {
            public Term<T> mult(final primary_<T> p) {
                return new Term<T>(SqlFactory.getInstance()._APPLY_RULE_(this, p));
            }
        }
;

<T> primary_<T> ::= LEFT_PAREN e:expression_<T> RIGHT_PAREN
    :: Expression<T> mimics Primary<T> {}
;