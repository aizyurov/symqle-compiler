package org.simqle.generation;

import junit.framework.TestCase;
import org.simqle.generator.Generator;
import org.simqle.generator.InterfaceGenerator;
import org.simqle.processor.Director;
import org.simqle.test.TestUtils;

import java.io.File;

/**
 * Created by IntelliJ IDEA.
 * User: lvovich
 * Date: 24.09.12
 * Time: 12:50
 * To change this template use File | Settings | File Templates.
 */
public class TestGeneration extends TestCase {

    public void testInterfaceGeneration() throws Exception {
        Director director = new Director(new Generator[]{new InterfaceGenerator()});
        director.doAll(new File[] {new File("src/test-data/interface-generation/InterfaceGenerationTest.sdl")},
                new File("target/test-generated-sources-1"));
        assertEquals(expectedScalarSource, TestUtils.readTextFile(new File("target/test-generated-sources-1/org/simqle/sql/Scalar.java")));
        assertEquals(expectedSelectStatementScalarSource, TestUtils.readTextFile(new File("target/test-generated-sources-1/org/simqle/sql/select_statement_scalar.java")));

    }


    final String expectedScalarSource = "/*\n" +
            "* Copyright (c) 2010-2011 Alexander Izyurov\n" +
            "* This file is generated by Simqle code generator\n" +
            "*/\n" +
            "\n" +
            "package org.simqle.sql;\n" +
            "\n" +
            "import org.simqle.Element;\n" +
            "\n" +
            "\n" +
            "\n" +
            "/**\n" +
            "* Represents\n" +
            "* Scalar\n" +
            "* symbol of SQL language.\n" +
            "* @param <T> type, to which this object can be converted when appears in the result set\n" +
            "*/\n" +
            "public  interface Scalar<T> {\n" +
            "\n" +
            "    \n" +
            "     T value(Element element) ;\n" +
            "\n" +
            "}\n";

    final String expectedSelectStatementScalarSource = "/*\n" +
            "* Copyright (c) 2010-2011 Alexander Izyurov\n" +
            "* This file is generated by Simqle code generator\n" +
            "*/\n" +
            "\n" +
            "package org.simqle.sql;\n" +
            "\n" +
            "import org.simqle.Query;\n" +
            "import org.simqle.SqlContext;\n" +
            "\n" +
            "// this line comment\n" +
            "/* this multiline comment\n" +
            "*/\n" +
            "/**\n" +
            "* and this javadoc\n" +
            "* will all appear in the interface comment\n" +
            "*/\n" +
            "\n" +
            "/**\n" +
            "* Represents\n" +
            "* select_statement_scalar\n" +
            "* symbol of SQL language.\n" +
            "* @param <T> type, to which this object can be converted when appears in the result set\n" +
            "*/\n" +
            "public  interface select_statement_scalar<T> extends Scalar<T>{\n" +
            "        /**\n" +
            "        * Creates a Query\n" +
            "        * @param context the Sql construction context\n" +
            "        * @return query conforming to <code>this</code> syntax\n" +
            "        */\n" +
            "        \n" +
            "     /**\n" +
            "        * Creates a Query\n" +
            "        * @param context the Sql construction context\n" +
            "        * @return query conforming to <code>this</code> syntax\n" +
            "        */\n" +
            "        Query<T> z$create$select_statement_scalar(final SqlContext context) ;\n" +
            "\n" +
            "        /**\n" +
            "        * Prepares SQL context for construction of select_statement_scalar Sql clause\n" +
            "        * @param context the Sql construction context\n" +
            "        */\n" +
            "        \n" +
            "     void z$prepare$select_statement_scalar(final SqlContext context) ;\n" +
            "\n" +
            "}\n";
}
