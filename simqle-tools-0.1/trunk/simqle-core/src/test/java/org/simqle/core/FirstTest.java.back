package org.simqle.core;

import junit.framework.TestCase;
import org.simqle.*;
import org.simqle.sql.cursor_specification;

import java.sql.SQLException;
import java.util.List;

/**
 * Created by IntelliJ IDEA.
 * User: lvovich
 * Date: 19.10.11
 * Time: 20:34
 * To change this template use File | Settings | File Templates.
 */
public class FirstTest extends TestCase {

    public void test() throws Exception {
        Database database = new Database() {

            public <T> void query(final Sql query, final IteratorCallback<Row> callback) throws SQLException {
                for (int i=0; i<2; i++) {
                    System.out.println("Database: "+query.getSqlText());
                    final Row row = new Row() {
                        public Element getValue(final String label) {
                            return null;
                        }

                        public Element getValue(final int position) {
                            return null;
                        }
                    };
                    callback.iterate(row);
                }
            }

            public int update(final Sql statement) throws SQLException {
                // TODO implement
                throw new RuntimeException("Not implemented");
            }

            public String getDialect() {
                // TODO implement
                throw new RuntimeException("Not implemented");
            }
        };

        cursor_specification.Builder<String> cursor = new cursor_specification.Builder<String>() {
            public Query<String> z$create$cursor_specification(final SqlContext context) {
                return new Query<String>() {
                    public String extract(final Row row) {
                        System.out.println("Extracting...");
                        return "wow";
                    }

                    public String getSqlText() {
                        return "SELECT A FROM B";
                    }

                    public void setParameters(final SqlParameters p) {
                        // do nothing
                    }
                };
            }

            public void z$prepare$cursor_specification(final SqlContext context) {
                // do nothing
            }
        };

        CursorSpecification<String> cursorSpecification = new CursorSpecification(cursor);
        final List<String> list = cursorSpecification.list(database);
        System.out.println(list);
        System.out.println();
        final List list1 = cursorSpecification.forUpdate().list(database);
        System.out.println(list1);

    }

    public void testFirst() throws Exception {
        Table table = new Table("employee");
        Table anotherEmployee = new Table("another");
        Column column = new StringColumn("name", table);
        Column anotherColumn = new StringColumn("anotherName", anotherEmployee);
        Database mockDatabase = new Database() {
            public <T> void query(Sql query, IteratorCallback<Row> callback) throws SQLException {
                System.out.println(query.getSqlText());
            }

            public int update(Sql statement) throws SQLException {
                System.out.println(statement.getSqlText());
                return 0;
            }

            public String getDialect() {
                throw new RuntimeException("Not implemented");
            }
        };
//        column.list(mockDatabase);
//
//        column.distinct().list(mockDatabase);
//
//        column.where(column.greaterOrEqual(column)).list(mockDatabase);

//        column.where(column.equal(anotherColumn.distinct())).list(mockDatabase);
//        anotherEmployee.joinLeft(column.equal(anotherColumn));
//        column.where(anotherColumn.isNotUnknown()).orderBy(column.asc(), anotherColumn.desc().nullsFirst()).list(mockDatabase);

//        table.update(column.setNull().chain(column.setDefault())).where(column.notEqual(column)).execute(mockDatabase);
        table.insert(column.setNull().chain(column.setDefault())).execute(mockDatabase);

//        column.
    }

    public static class StringColumn extends Column<String> {

        public StringColumn(String name, Table owner) {
            super(name, owner);
        }

        public String value(Element element) throws SQLException {
            return Scalar.STRING_SCALAR.value(element);
        }
    }
}
